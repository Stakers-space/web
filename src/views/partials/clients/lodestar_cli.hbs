{{#unless InstallationGuide}}
<h3>Check current version of Lodestar running on the server:</h3>
<pre><code>cd /usr/local/bin/lodestar</code></pre>
<pre><code>./lodestar -v</code></pre>
{{/unless}}

<ol>
    {{#if InstallationGuide}}
    <li>
        <h3 class="mt-20">Installing NodeJS through the Node Version Manager</h3>
        <p>Node Version Manager (NVM) is a piece of shell code that allows you to easily install and maintain different versions of Node.js and its associated packages.</p>
        <ol>
            <li>Check latest verision of <a href="https://github.com/nvm-sh/nvm">NVM on GitHub</a>.</li>
            <li><h4>View code of NVM ver {{consensusClients.lodestar.nvmVer}}</h4>
                <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{consensusClients.lodestar.nvmVer}}/install.sh</code></pre></li>
            <li><h4>Install NVM</h4>
                <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v{{consensusClients.lodestar.nvmVer}}/install.sh | bash</code></pre>
                <p><i>NVM will be installed with permissions of a user that processing that request (you). NVM is installed to user account, specifically to "~/.bashrc" directory.</i></p>
            </li>
            <li><h4>source/reload <code>nvm</code> for an option to use it</h4>
                <pre><code>source ~/.bashrc</code></pre>
            </li>
            <li><h4>Check available Node.js versions</h4>
                <pre><code>nvm list-remote</code></pre>
                Selected version: <code>v<input type="text" value="20.11.0" id="nodejsVer" class="interactive-element" data-class="nodejsVer"></code>
            </li>
            <li><h4>Install requested Node.js version</h4>
                <pre><code>nvm install v<mark class="nodejsVer">{{consensusClients.lodestar.nodejsVer}}</mark></code></pre>
                <p><i>Node.js is installed with permissions of a user that processing that request (you)</i></p>
            </li>
            <li><h4>Show active Node.js version in use</h4>
                <pre><code>node -v</code></pre>
                <p>If o version is selected, use <code>nvm use <mark class="nodejsVer">{{consensusClients.lodestar.nodejsVer}}</mark></code></p>
            </li>
        </ol>
    </li>
    <li class="mt-20">
        <h3>Install build-essential tools</h3>
        <pre><code>sudo apt-get install build-essential -y</code></pre>
    </li>
    <li>
        <h3 class="mt-20">Install Yarn</h3>
        <pre><code>corepack enable</code></pre>
        <pre><code>corepack prepare yarn@stable --activate</code></pre>
        <pre><code>yarn help</code></pre>
    </li>
    {{else}}
    <li>
        <h3>Remove old repository clone</h3>
        <pre><code>cd ~/downloads && sudo rm -r lodestar</code></pre>
    </li>
    {{/if}}
    <li><h3>Build Lodestar</h3>
        <ul>
            <li><h4>Download latest Lodestar client <a href="https://github.com/ChainSafe/lodestar/releases" target="_blank" rel="nofollow noopener noreferrer">from GitHub</a></h4>
                <pre><code>cd ~/downloads && git clone -b stable https://github.com/chainsafe/lodestar.git</code></pre>
            </li>
            <li>
                <h4>Install yarn</h4>
                <pre><code>cd lodestar && yarn install</code></pre>
            </li>
            <li><h4>Build Lodestart client</h4>
                <pre><code>yarn run build</code></pre>
            </li>
            <li>
                <h4>Check builded Lodestar version</h4>
                <pre><code>./lodestar -v</code></pre>
            </li>
        </ul>   
    </li>
    {{#unless InstallationGuide}}
    <li>
        <h3>Stop Lodestar services</h3>
        <div class="tabselector" data-client="lodestar">
		    <nav class="egrid egrid-2">
				<button class="tab selected" data-tabpanel="1">Standard option</button>
				<button class="tab" data-tabpanel="2">Staking manager</button>
			</nav>
			<div class="tabpanel selected">
                <p>Stop Lodestar Beacon service and all validators-based services</p>
                <pre><code>sudo systemctl stop <mark class="consensus_sn">{{servicePrefix}}lodestarbeacon</mark>
sudo systemctl stop {{servicePrefix}}lodestar-vi...
sudo systemctl stop {{servicePrefix}}lodestar-vi...
...</code></pre>
			</div>
			<div class="tabpanel">
                <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
                <p>Stop cosnsensus services</p>
                <pre><code>/usr/local/bin/staking.sh stop consensus</code></pre>
                <p>Check cosnsensus services status</p>
                <pre><code>/usr/local/bin/staking.sh check consensus</code></pre>
			</div>
		</div>
    </li>
    <li><h3>Remove old production Lodestar client</h3>
        <pre><code>sudo rm -r /usr/local/bin/lodestar</code></pre>
    </li>
    {{/unless}}
    <li><h3>Copy new production client to <code>/usr/local/bin</code> directory</h3>
        <pre><code>sudo cp -a ~/downloads/lodestar /usr/local/bin</code></pre>
    </li>
    {{#unless InstallationGuide}}
     <li><h3>Start the Lodestar services</h3>
        <div class="tabselector" data-client="lodestar">
		    <nav class="egrid egrid-2">
				<button class="tab selected" data-tabpanel="1">Standard option</button>
				<button class="tab" data-tabpanel="2">Staking manager</button>
			</nav>
			<div class="tabpanel selected">
                <p>Start Lodestar Beacon service and all validators-based services</p>
                <pre><code>sudo systemctl start <mark class="consensus_sn">{{servicePrefix}}lodestarbeacon</mark>
sudo systemctl start {{servicePrefix}}lodestar-vi...
sudo systemctl start {{servicePrefix}}lodestar-vi...
...</code></pre>
			</div>
			<div class="tabpanel">
                <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
                <pre><code>/usr/local/bin/staking.sh start consensus</code></pre>
			</div>
		</div>
    </li>
    <li><h3>Monitor</h3>
        <div class="tabselector" data-client="lodestar">
		    <nav class="egrid egrid-2">
				<button class="tab selected" data-tabpanel="1">Standard option</button>
				<button class="tab" data-tabpanel="2">Staking manager</button>
			</nav>
			<div class="tabpanel selected">
                <ul>
                    <li><pre><code>systemctl status <mark class="consensus_sn">{{servicePrefix}}lodestarbeacon</mark> {{servicePrefix}}lodestar-vi.. {{servicePrefix}}lodestar-vi..</code></pre></li>
                    <li><pre><code>journalctl -fu <mark class="consensus_sn">{{servicePrefix}}lodestarbeacon</mark></code></pre></li>
                    <li><pre><code>journalctl -f -u lodestar-vi.. -u lodestar-vi..</code></pre></li>
                </ul>
			</div>
			<div class="tabpanel">
                <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
                <pre><code>/usr/local/bin/staking.sh check consensus</code></pre>
                <pre><code>/usr/local/bin/staking.sh monitor consensus</code></pre>
			</div>
		</div>
    </li>
    {{/unless}}
</ol>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const tabSelectors = document.querySelectorAll('.tabselector[data-client="lodestar"]');
    tabSelectors.forEach(tabSelector => {
        const buttons = tabSelector.querySelectorAll("button.tab");
        buttons.forEach(button => {
            button.addEventListener("click", () => {
                const selectedTabPanel = button.getAttribute("data-tabpanel");
                tabSelectors.forEach(syncTabSelector => {
                    // remove selectors
                    syncTabSelector.querySelectorAll("button.tab, .tabpanel").forEach(el => {
                        el.classList.remove("selected");
                    });
                    // button
                    syncTabSelector.querySelector(`button.tab[data-tabpanel="${selectedTabPanel}"]`).classList.add("selected");
                    // panel
                    syncTabSelector.children[selectedTabPanel].classList.add("selected");
                });
            });
        });
    });
});
</script>