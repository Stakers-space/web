{{#unless InstallationGuide}}
<h3>Check current version of Teku running on the server:</h3>
<pre><code>/usr/local/bin/teku/bin/teku --version</code></pre>
{{/unless}}

<ol class="list-decimal space-y-2 pl-6">
{{#if InstallationGuide}}
    <li><h3>Install Java</h3>
      <pre><code>cd ~/downloads && wget https://download.oracle.com/java/{{consensusClients.teku.jdkVer}}/latest/jdk-{{consensusClients.teku.jdkVer}}_linux-x64_bin.deb</code></pre>
<pre><code>sudo apt install ./jdk-{{consensusClients.teku.jdkVer}}_linux-x64_bin.deb</code></pre>
      <code>java --version</code>
    </li>
{{/if}}
    <li>
       <h3>Find the latest stable version of Teku on Github</h3>
        Find latest Teku version at Github: <a href="https://github.com/Consensys/teku/releases" target="_blank" rel="nofollow noopener noreferrer">https://github.com/Consensys/teku/releases</a><br>
        Write latest stable Teku version: <input type="text" value="{{consensusClients.teku.latestVer}}" class="tekuVersion-input" style="width:100%"><br>
        <p>This will update the url links in the guide below.</p>
    </li>
    <li><h3>Download the latest Teku version</h3>
      <pre><code>cd ~/downloads && curl -LO https://artifacts.consensys.net/public/teku/raw/names/teku.tar.gz/versions/<mark class="tekuVersion">{{consensusClients.teku.latestVer}}</mark>/teku-<mark class="tekuVersion">{{consensusClients.teku.latestVer}}</mark>.tar.gz</code></pre>
    </li>
    <li><h3>Unpack the downloaded Teku version</h3>
      <pre><code>$ tar xvf teku-<mark class="tekuVersion">{{consensusClients.teku.latestVer}}</mark>.tar.gz</code></pre>
    </li>
    {{#unless InstallationGuide}}
    <li>
      <h3>Stop Teku services</h3>
      <div class="tabselector" data-client="teku">
		    <nav class="egrid egrid-2">
          <button class="tab selected" data-tabpanel="1">Standard option</button>
          <button class="tab" data-tabpanel="2">Staking manager</button>
        </nav>
        <div class="tabpanel selected">
          <p>Stop Teku Beacon service and all validators-based services</p>
          <pre><code>sudo systemctl stop <mark class="consensus_sn">{{servicePrefix}}tekubeacon</mark>
sudo systemctl stop {{servicePrefix}}teku-vi...
sudo systemctl stop {{servicePrefix}}teku-vi...
...</code></pre>
          <p>Check services status for state</p>
          <pre><code>sudo systemctl status <mark class="consensus_sn">{{servicePrefix}}tekubeacon</mark>
sudo systemctl status {{servicePrefix}}teku-vi...; sudo systemctl status {{servicePrefix}}teku-vi...
...</code></pre>
			</div>
			<div class="tabpanel">
          <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
          <p>Stop cosnsensus services</p>
          <pre><code>/usr/local/bin/staking.sh stop consensus</code></pre>
          <p>Check cosnsensus services status</p>
          <pre><code>/usr/local/bin/staking.sh check consensus</code></pre>
			</div>
		</div>
    </li>
    <li>
      <h3>Remove Old Teku Library</h3>
      <pre><code>sudo rm -r /usr/local/bin/teku</code></pre>
    </li>
    {{/unless}}
    <li>
      <h3>Copy the Teku Library</h3>
      <pre><code>sudo cp -a ~/downloads/teku-<mark class="tekuVersion">{{consensusClients.teku.latestVer}}</mark> /usr/local/bin/teku</code></pre>
    </li>
    {{#unless InstallationGuide}}
    <li>
      <h3>Start the services again</h3>
      <div class="tabselector" data-client="teku">
		    <nav class="egrid egrid-2">
          <button class="tab selected" data-tabpanel="1">Standard option</button>
          <button class="tab" data-tabpanel="2">Staking manager</button>
        </nav>
        <div class="tabpanel selected">
          <p>Start Teku Beacon service and all validators-based services</p>
          <pre><code>sudo systemctl start <mark class="consensus_sn">{{servicePrefix}}tekubeacon</mark>
sudo systemctl start {{servicePrefix}}teku-vi...
sudo systemctl start {{servicePrefix}}teku-vi...
...</code></pre>
			</div>
			<div class="tabpanel">
          <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
          <pre><code>/usr/local/bin/staking.sh start consensus</code></pre>
			</div>
		</div>
    </li>
    <li><h3>Monitor</h3>
      <div class="tabselector" data-client="teku">
		    <nav class="egrid egrid-2">
				<button class="tab selected" data-tabpanel="1">Standard option</button>
				<button class="tab" data-tabpanel="2">Staking manager</button>
			</nav>
			<div class="tabpanel selected">
        <ul class="list-disc mt-4 mb-4">
            <li><pre><code>systemctl status <mark class="consensus_sn">{{servicePrefix}}tekubeacon</mark> {{servicePrefix}}teku-vi..</code></pre></li>
            <li><pre><code>journalctl -fu <mark class="consensus_sn">{{servicePrefix}}tekubeacon</mark></code></pre></li>
            <li><pre><code>journalctl -f -u teku-vi.. -u teku-vi..</code></pre></li>
        </ul>
			</div>
			<div class="tabpanel">
          <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
          <pre><code>/usr/local/bin/staking.sh check consensus</code></pre>
          <pre><code>/usr/local/bin/staking.sh monitor consensus</code></pre>
			</div>
		</div>
    </li>
    {{/unless}}
    <li><h3>Remove downloaded files</h3>
  <pre><code>cd ~/downloads && rm teku-<mark class="tekuVersion">{{consensusClients.teku.latestVer}}</mark>.tar.gz && rm -r teku-<mark class="tekuVersion">{{consensusClients.teku.latestVer}}</mark></code></pre>
    </li>
</ol>
<script>
    for (const lighthouseVer of document.getElementsByClassName("tekuVersion-input")) {
        lighthouseVer.addEventListener('change', UpdateTeku);
    }
    function UpdateTeku(e){
        const value = e.target.value;
        for (const elm of document.getElementsByClassName("tekuVersion-input")) { elm.innerHTML = value; elm.value = value; };
        for (const elm of document.getElementsByClassName("tekuVersion")) { elm.innerHTML = value; };
    }
</script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const tabSelectors = document.querySelectorAll('.tabselector[data-client="teku"]');
    tabSelectors.forEach(tabSelector => {
        const buttons = tabSelector.querySelectorAll("button.tab");
        buttons.forEach(button => {
            button.addEventListener("click", () => {
                const selectedTabPanel = button.getAttribute("data-tabpanel");
                tabSelectors.forEach(syncTabSelector => {
                    // remove selectors
                    syncTabSelector.querySelectorAll("button.tab, .tabpanel").forEach(el => {
                        el.classList.remove("selected");
                    });
                    // button
                    syncTabSelector.querySelector(`button.tab[data-tabpanel="${selectedTabPanel}"]`).classList.add("selected");
                    // panel
                    syncTabSelector.children[selectedTabPanel].classList.add("selected");
                });
            });
        });
    });
});
</script>