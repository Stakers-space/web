{{#unless InstallationGuide}}
<h3>Check current version of Lodestar running on the server:</h3>
<pre><code>cd /usr/local/bin</code></pre>
Beacon chain: <pre><code>./beacon-chain --version</code></pre>
Validator: <pre><code>./validator --version</code></pre>
{{/unless}}

<ol>
    <li>
        <h3>Find the latest stable version of Prysm on Github</h3>
        <ul>
            <li>Find latest Prysm version at <a href="https://github.com/prysmaticlabs/prysm/releases" target="_blank" rel="nofollow noopener noreferrer">https://github.com/prysmaticlabs/prysm/releases</a></li>
            <li><mark>
                Write latest stable Prysm version: <input type="text" value="{{consensusClients.prysm.latestVer}}" class="prysmVer-input"><br>
                <p>This will update the url links in the guide below.</p>
            </li>
        </ul>
    </li>
    <li class="mt-15">
        <h3>Download Prysm clients to your node</h3>
        <pre><code>cd ~/downloads && curl -LO https://github.com/prysmaticlabs/prysm/releases/download/v<mark class="prysmVer">{{consensusClients.prysm.latestVer}}</mark>/beacon-chain-v<mark class="prysmVer">{{consensusClients.prysm.latestVer}}</mark>-modern-linux-amd64</code></pre>
        <pre><code>cd ~/downloads && curl -LO https://github.com/prysmaticlabs/prysm/releases/download/v<mark class="prysmVer">{{consensusClients.prysm.latestVer}}</mark>/validator-v<mark class="prysmVer">{{consensusClients.prysm.latestVer}}</mark>-linux-amd64</code></pre>
    </li>
    <li class="mt-15">
        <h3>Rename downloaded files</h3>
        <pre><code>mv beacon-chain-v<mark class="prysmVer">{{consensusClients.prysm.latestVer}}</mark>-modern-linux-amd64 beacon-chain && mv validator-v<mark class="prysmVer">{{consensusClients.prysm.latestVer}}</mark>-linux-amd64 validator</code></pre>
    </li>
    <li class="mt-15">
        <h3>Set files permissions</h3>
        <pre><code>chmod +x beacon-chain && chmod +x validator</code></pre>
    </li>
    {{#unless InstallationGuide}}
    <li class="mt-15">
        <h3>Stop running clients</h3>
        <p>You can time this based on validator duties either from validator instances log(s) or for Ethereum also from sources such as <a href="https://wenmerge.com/block-proposer-schedule/validator-proposal-subscription/" target="_blank" rel="nofollow noopener noreferrer">WenMerge.com</a> or <a href="https://ethstakers.club/dashboard" target="_blank" rel="nofollow noopener noreferrer">ETHStakers</a>.</p>
        <div class="tabselector" data-client="prysm">
			<nav class="egrid egrid-2">
				<button class="tab selected" data-tabpanel="1">Standard Option</button>
				<button class="tab" data-tabpanel="2">Staking Manager</button>
			</nav>
			<div class="tabpanel selected">
                <pre><code>// Stop all validator instances using Prysm clients on all chains
// sudo systemctl stop prysmvalidator1
// sudo systemctl stop prysmvalidator2
// sudo systemctl stop prysmRocketpoolValidator
// sudo systemctl stop prysmStakewiseValidator
// ...
// Stop beaconchain clients using PrysmBeacon client on all chains
sudo systemctl stop prysmbeacon</code></pre>
			</div>
			<div class="tabpanel">
                <aside>NOTE: This section uses <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager script</a>.</aside>
<pre><code>/usr/local/bin/staking.sh stop consensus</code></pre>
<p>Check the services</p>
<pre><code>/usr/local/bin/staking.sh check</code></pre>
			</div>
		</div>
    </li>
    {{/unless}}
    <li class="mt-15">
        <h3>Copy clients to <code>/usr/local/bin</code></h3>
        <pre><code>sudo cp ~/downloads/beacon-chain /usr/local/bin</code></pre>
        <pre><code>sudo cp ~/downloads/validator /usr/local/bin</code></pre>
    </li>
    <li class="mt-15">
        <h3>Start services using Prysm clients</h3>
        <div class="tabselector" data-client="prysm">
			<nav class="egrid egrid-2">
				<button class="tab selected" data-tabpanel="1">Standard Option</button>
				<button class="tab" data-tabpanel="2">Staking Manager</button>
			</nav>
			<div class="tabpanel selected">
                <pre><code>// Start all validator instances using Prysm clients on all chains
// sudo systemctl start prysmvalidator1
// sudo systemctl start prysmvalidator2
// sudo systemctl start prysmRocketpoolValidator
// sudo systemctl start prysmStakewiseValidator
// ...
// Start beaconchain clients using PrysmBeacon client on all chains
sudo systemctl start prysmbeacon</code></pre>
			</div>
			<div class="tabpanel">
                <aside>NOTE: This section uses <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager script</a>.</aside>
<pre><code>/usr/local/bin/staking.sh start consensus</code></pre>
<p>Check the services status</p>
<pre><code>/usr/local/bin/staking.sh check</code></pre>
			</div>
		</div>
    </li>
    <li class="mt-15"><h3>Monitor</h3>
        <div class="tabselector" data-client="lighthouse">
		    <nav class="egrid egrid-2">
				<button class="tab selected" data-tabpanel="1">Standard option</button>
				<button class="tab" data-tabpanel="2">Staking manager</button>
			</nav>
			<div class="tabpanel selected">
                <pre><code>journalctl -fu prysmbeacon.service</code></pre>
                <pre><code>journalctl -f -u prysmvalidator.service -u prysmvalidator2.service</code></pre>
                <pre><code>...</code></pre>
			</div>
			<div class="tabpanel">
                <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
                <pre><code>/usr/local/bin/staking.sh check consensus</code></pre>
                <pre><code>/usr/local/bin/staking.sh monitor consensus</code></pre>
			</div>
		</div>
    </li>
    <li class="mt-15">
        <h3>Remove downloaded files</h3>
        <pre><code>cd ~/downloads && rm beacon-chain && rm validator</code></pre>
    </li>
</ol>

<script>
    for (const prysmVer of document.getElementsByClassName("prysmVer-input")) {
        prysmVer.addEventListener('change', UpdatePrysm);
    }
    function UpdatePrysm(e){
        const value = e.target.value;
        for (const elm of document.getElementsByClassName("prysmVer-input")) { elm.innerHTML = value; };
        for (const elm of document.getElementsByClassName("prysmVer")) { elm.innerHTML = value; };
    }
</script>
<script>
document.addEventListener("DOMContentLoaded", function() {
    const tabSelectors = document.querySelectorAll('.tabselector[data-client="prysm"]');
    tabSelectors.forEach(tabSelector => {
        const buttons = tabSelector.querySelectorAll("button.tab");
        buttons.forEach(button => {
            button.addEventListener("click", () => {
                const selectedTabPanel = button.getAttribute("data-tabpanel");
                tabSelectors.forEach(syncTabSelector => {
                    // remove selectors
                    syncTabSelector.querySelectorAll("button.tab, .tabpanel").forEach(el => {
                        el.classList.remove("selected");
                    });
                    // button
                    syncTabSelector.querySelector(`button.tab[data-tabpanel="${selectedTabPanel}"]`).classList.add("selected");
                    // panel
                    syncTabSelector.children[selectedTabPanel].classList.add("selected");
                });
            });
        });
    });
});
</script>