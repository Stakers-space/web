<aside><mark>Guide under construction, not tested yet. Do not use it for production.</mark></aside>
{{#unless InstallationGuide}}
  <h3>Check current version of Nimbus running on the server:</h3>
  <pre><code>cd /usr/local/bin</code></pre>
  Beacon chain
  <pre><code>./nimbus-beacon --version</code></pre>
  Validator:
  <pre><code>./nimbus-validator --version</code></pre>
{{/unless}}

<div class="tabselector">
			<nav class="egrid egrid-2">
        <button class="tab selected" data-tabpanel="1">Through a downloaded client</button>
				<button class="tab" data-tabpanel="2">Build from source code (Required for Gnosis)</button>
			</nav>
      <div class="tabpanel selected">
          <ol>
            <li>
              <h3>Find the latest stable version of Nimbus on Github</h3>
Find latest Nimbus version at Github: <a href="https://github.com/status-im/nimbus-eth2/releases" target="_blank" rel="nofollow noopener noreferrer">https://github.com/status-im/nimbus-eth2/releases</a><br>
<mark>Write latest stable Nimbus version: <input type="text" value="{{consensusClients.nimbus.latestVer}}" class="nimbus_verhash-input" style="width:100%"><br>
<p>This will update the url links in the guide below.</p>
            </li>
    <li><h3>Download the latest Nimbus client</h3>
      <pre><code>cd ~/downloads && curl -LO https://github.com/status-im/nimbus-eth2/releases/download/v<mark class="nimbusVersion">{{consensusClients.nimbus.latestVerClean}}</mark>/nimbus-eth2_Linux_amd64_<mark class="nimbus_verhash">{{consensusClients.nimbus.latestVer}}</mark>.tar.gz</code></pre>
    </li>
    <li><h3>Extract the downloaded package</h3>
      <pre><code>tar xvf nimbus-eth2_Linux_amd64_<mark class="nimbus_verhash">{{consensusClients.nimbus.latestVer}}</mark>.tar.gz</code></pre>
    </li>
    {{#unless InstallationGuide}}
    <li>
      <h3>Stop Nimbus services</h3>
      <div class="tabselector" data-client="nimbus">
		    <nav class="egrid egrid-2">
          <button class="tab selected" data-tabpanel="1">Standard option</button>
          <button class="tab" data-tabpanel="2">Staking manager</button>
        </nav>
        <div class="tabpanel selected">
          <p>Stop Nimbus Beacon service and all validators-based services</p>
          <pre><code>sudo systemctl stop <mark class="consensus_sn">{{servicePrefix}}nimbusbeacon</mark>
sudo systemctl stop {{servicePrefix}}nimbus-vi...
sudo systemctl stop {{servicePrefix}}nimbus-vi...
...</code></pre>
          <p>Check services status for state</p>
          <pre><code>sudo systemctl status <mark class="consensus_sn">{{servicePrefix}}nimbusbeacon</mark>
sudo systemctl status {{servicePrefix}}nimbus-vi...; sudo systemctl status {{servicePrefix}}nimbus-vi...
...</code></pre>
			</div>
			<div class="tabpanel">
          <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
          <p>Stop cosnsensus services</p>
          <pre><code>/usr/local/bin/staking.sh stop consensus</code></pre>
          <p>Check cosnsensus services status</p>
          <pre><code>/usr/local/bin/staking.sh check consensus</code></pre>
			</div>
		</div>
    </li>
    {{/unless}}
    <li><h3>Copy Nimbus clients to <code>/usr/local/bin</code></h3>
      <pre><code>sudo cp -a nimbus-eth2_Linux_amd64_<mark class="nimbus_verhash">{{consensusClients.nimbus.latestVer}}</mark>/build /usr/local/bin/nimbus</code></pre>
    </li>
    {{#unless InstallationGuide}}
    <li>
      <h3>Start the services again</h3>
      <div class="tabselector" data-client="nimbus">
		    <nav class="egrid egrid-2">
          <button class="tab selected" data-tabpanel="1">Standard option</button>
          <button class="tab" data-tabpanel="2">Staking manager</button>
        </nav>
        <div class="tabpanel selected">
          <p>Start Nimbus Beacon service and all validators-based services</p>
          <pre><code>sudo systemctl start <mark class="consensus_sn">{{servicePrefix}}nimbusbeacon</mark>
sudo systemctl start {{servicePrefix}}nimbus-vi...
sudo systemctl start {{servicePrefix}}nimbus-vi...
...</code></pre>
			</div>
			<div class="tabpanel">
          <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
          <pre><code>/usr/local/bin/staking.sh start consensus</code></pre>
			</div>
		</div>
    </li>
    <li><h3>Monitor</h3>
      <div class="tabselector" data-client="nimbus">
		    <nav class="egrid egrid-2">
				<button class="tab selected" data-tabpanel="1">Standard option</button>
				<button class="tab" data-tabpanel="2">Staking manager</button>
			</nav>
			<div class="tabpanel selected">
          <ul>
              <li><pre><code>systemctl status <mark class="consensus_sn">{{servicePrefix}}nimbusbeacon</mark> {{servicePrefix}}nimbus-vi..</code></pre></li>
              <li><pre><code>journalctl -fu <mark class="consensus_sn">{{servicePrefix}}nimbusbeacon</mark></code></pre></li>
              <li><pre><code>journalctl -f -u nimbus-vi.. -u nimbus-vi..</code></pre></li>
          </ul>
			</div>
			<div class="tabpanel">
          <aside><b>This option requires installed and configured <a href="https://github.com/Stakers-space/staking-scripts/tree/main/manager" target="_blank">Staking manager</a></b></aside>
          <pre><code>/usr/local/bin/staking.sh check consensus</code></pre>
          <pre><code>/usr/local/bin/staking.sh monitor consensus</code></pre>
			</div>
		</div>
    </li>
    {{/unless}}
    <li><h3>Remove downloaded files</h3>
      <pre><code>rm nimbus-eth2_Linux_amd64_<mark class="nimbus_verhash">{{consensusClients.nimbus.latestVer}}</mark>.tar.gz && rm -r nimbus-eth2_Linux_amd64_<mark class="nimbus_verhash">{{consensusClients.nimbus.latestVer}}</mark></code></pre>
    </li>
</ol>    
			</div>

			<div class="tabpanel">
          <ol>
            {{#if InstallationGuide}}
            <li><h3>Install Nimbus' dependencies</h3>
                <pre><code>sudo apt-get install build-essential git-lfs cmake</code></pre>
            </li>
            {{/if}}
            <li><h3>Download the latest Nimbus client</h3>
              <pre><code>cd ~/downloads && git clone -b stable https://github.com/status-im/nimbus-eth2.git</code></pre>
            </li>
            <li><h3>Move update</h3>
              <pre><code>cd nimbus-eth2 && make update</code></pre>
            </li>
            <li><h3>Build Nimbus</h3>
              <div class="tabselector" data-client="nimbus">
                <nav class="egrid egrid-2">
                <button class="tab selected" data-tabpanel="1">Ethereum</button>
                <button class="tab" data-tabpanel="2">Gnosis</button>
              </nav>
              <div class="tabpanel selected">
                  <pre><code></code></pre>
              </div>
              <div class="tabpanel">
                <pre><code>make gnosis-build</code></pre>
                <pre><code>make gnosis-vc-build</code></pre>
              </div>
            </div>
            </li>
            <li><h3>Copy Nimbus clients to <code>/usr/local/bin</code></h3>
              <pre><code>sudo cp -a build/nimbus_beacon_node_gnosis /usr/local/bin/nimbus</code></pre>
              <pre><code>sudo cp -a build/nimbus_validator_client_gnosis /usr/local/bin/nimbus</code></pre>
            </li>
          </ol>
			</div>
		</div>

<script>
    for (const nimbusVerHash of document.getElementsByClassName("nimbus_verhash-input")) {
      nimbusVerHash.addEventListener('change', UpdateNimbus);
    }
    function UpdateNimbus(e){
        const value = e.target.value;
        // all inputs (if more times on the page)
        for (const elm of document.getElementsByClassName("nimbus_verhash-input")) { elm.innerHTML = value; };

        for (const elm of document.getElementsByClassName("nimbus_verhash")) { elm.innerHTML = value; };

        var nimbusVer = value.split("_")[0];
        for (const elm of document.getElementsByClassName("nimbusVersion")) { elm.innerHTML = nimbusVer; };
        console.log("Nimbus |", nimbusVer, value);

        //for (const zipNameElm of document.getElementsByClassName("nethermind_namezip")) { zipNameElm.innerHTML = "nethermind-" + value + "-linux-x64.zip"; };
    }
</script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const tabSelectors = document.querySelectorAll('.tabselector[data-client="nimbus"]');
    tabSelectors.forEach(tabSelector => {
        const buttons = tabSelector.querySelectorAll("button.tab");
        buttons.forEach(button => {
            button.addEventListener("click", () => {
                const selectedTabPanel = button.getAttribute("data-tabpanel");
                tabSelectors.forEach(syncTabSelector => {
                    // remove selectors
                    syncTabSelector.querySelectorAll("button.tab, .tabpanel").forEach(el => {
                        el.classList.remove("selected");
                    });
                    // button
                    syncTabSelector.querySelector(`button.tab[data-tabpanel="${selectedTabPanel}"]`).classList.add("selected");
                    // panel
                    syncTabSelector.children[selectedTabPanel].classList.add("selected");
                });
            });
        });
    });
});
</script>