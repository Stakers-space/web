<p>StakeWise documentation: <a href="https://docs.stakewise.io/" target="_blank" rel="nofollow noopener noreferrer">https://docs.stakewise.io/</a></p>
<ol>
    <li>
		{{#if InstallationGuide}}
        <h3>Installing StakeWise client</h3>
        {{else}}
        <h3>Updating StakeWise client</h3>
        {{/if}}
        <ol>
            <li>
                <h4>Find the latest stable version of StakeWise client on Github</h4>
                <ul>
                    <li>Find latest StakeWise version at <a href="https://github.com/stakewise/v3-operator/releases" target="_blank" rel="nofollow noopener noreferrer">https://github.com/stakewise/v3-operator/releases</a></li>
                    <li>Write latest stable StakeWise version: <input type="text" value="{{serviceLayer.stakewise.latestVer}}" class="interactive-element stakewise_ver" data-class="stakewise_ver"><br>
                        <p>This will update the url links in the guide below.</p>
                    </li>
                </ul>
            </li>
            <li>
                <h4>Download the binary file for your node</h4>
                <pre><code>cd ~/downloads && curl -LO https://github.com/stakewise/v3-operator/releases/download/v<mark class="stakewise_ver">{{serviceLayer.stakewise.latestVer}}</mark>/operator-v<mark class="stakewise_ver">{{serviceLayer.stakewise.latestVer}}</mark>-linux-amd64.tar.gz</code></pre>
            </li>
            <li>
                <h4>Unpack the client and remove its packed file</h4>
                <pre><code>tar xvf operator-v<mark class="stakewise_ver">{{serviceLayer.stakewise.latestVer}}</mark>-linux-amd64.tar.gz && rm operator-v<mark class="stakewise_ver">{{serviceLayer.stakewise.latestVer}}</mark>-linux-amd64.tar.gz</code></pre>
            </li>
            {{#unless InstallationGuide}}
            <li class="mt-15">
                <h4>Stop running StakeWise clients</h4>
                <div class="tabselector mt-20" data-client="stakewise">
                    <nav class="egrid egrid-2">
                        <button class="tab selected" data-tabpanel="1">Standard configuration</button>
                        <button class="tab" data-tabpanel="2">Stakers.space configuration</button>
                    </nav>
                    <div class="tabpanel selected">
                        <pre><code>sudo systemctl stop <mark class="stakewise_service">{{servicePrefix}}stakewise-operator</mark> && systemctl status <mark class="stakewise_service">{{servicePrefix}}stakewise-operator</mark></code></pre>
                        <i>Modify the service names to reflect your used names during StakeWise integration</i>
                    </div>
                    <div class="tabpanel">
                        <pre><code>/usr/local/bin/staking.sh stop stakewise</code></pre>
                    </div>
                </div>
            </li>
            <li class="mt-15">
                <h4>Remove the old client</h4>
                <pre><code>sudo rm /usr/local/bin/stakewise-operator</code></pre>
            </li>
            {{/unless}}
            <li>
                <h4>Move the client to <code>/usr/local/bin</code></h4>
                <pre><code>sudo cp ~/downloads/operator-v<mark class="stakewise_ver">{{serviceLayer.stakewise.latestVer}}</mark>-linux-amd64/operator /usr/local/bin/stakewise-operator</code></pre>
            </li>
            {{#unless InstallationGuide}}
            <li>
                <h4>Start the client again</h4>
                <div class="tabselector mt-20" data-client="stakewise">
                    <nav class="egrid egrid-2">
                        <button class="tab selected" data-tabpanel="1">Standard configuration</button>
                        <button class="tab" data-tabpanel="2">Stakers.space configuration</button>
                    </nav>
                    <div class="tabpanel selected">
                        <pre><code>sudo systemctl start <mark class="stakewise_service">{{servicePrefix}}stakewise-operator</mark> && systemctl status <mark class="stakewise_service">{{servicePrefix}}stakewise-operator</mark></code></pre>
                        <i>Modify the service names to reflect your used names during StakeWise integration</i>
                    </div>
                    <div class="tabpanel">
                        <pre><code>/usr/local/bin/staking.sh start stakewise</code></pre>
                    </div>
                </div>
            </li>
            <li>
                <h4>Monitor</h4>
                <div class="tabselector mt-20" data-client="stakewise">
                    <nav class="egrid egrid-2">
                        <button class="tab selected" data-tabpanel="1">Standard configuration</button>
                        <button class="tab" data-tabpanel="2">Stakers.space configuration</button>
                    </nav>
                    <div class="tabpanel selected">
                        <pre><code>journalctl -f -u <mark class="stakewise_service">{{servicePrefix}}stakewise-operator</mark></code></pre>
                        <i>Modify the service names to reflect your used names during StakeWise integration</i>
                    </div>
                    <div class="tabpanel">
                        <pre><code>/usr/local/bin/staking.sh monitor stakewise</code></pre>
                    </div>
                </div>
            </li>
            {{/unless}}
            <li>
                <h4>Remove downloaded files</h4>
                <pre><code>rm -r ~/downloads/operator-v<mark class="stakewise_ver">{{serviceLayer.stakewise.latestVer}}</mark>-linux-amd64</code></pre>
            </li>
        </ol>
    </li>
</ol>
<script>document.addEventListener("DOMContentLoaded", function() {
        const tabSelectors = document.querySelectorAll('.tabselector[data-client="stakewise"]');
        tabSelectors.forEach(tabSelector => {
            const buttons = tabSelector.querySelectorAll("button.tab");
            buttons.forEach(button => {
                button.addEventListener("click", () => {
                    const selectedTabPanel = button.getAttribute("data-tabpanel");
                    tabSelectors.forEach(syncTabSelector => {
                        // remove selectors
                        syncTabSelector.querySelectorAll("button.tab, .tabpanel").forEach(el => {
                            el.classList.remove("selected");
                        });
                        // button
                        syncTabSelector.querySelector(`button.tab[data-tabpanel="${selectedTabPanel}"]`).classList.add("selected");
                        // panel
                        syncTabSelector.children[selectedTabPanel].classList.add("selected");
                    });
                });
            });
        });
    });</script>