<div class="max-w-6xl mx-auto px-4">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8 md:items-start">
        <div class="flex flex-col justify-center h-full">
            <div class="user-authentized hidden">
                <div class="mb-6">
                    <label class="font-semibold">Server Selection</label>
                    <select class="account-servers block w-full border border-gray-300 rounded-md mt-1 px-3 py-2"></select>
                </div>
                <div>
                    <label for="account-servers-instances" class="font-semibold">Instance Selection</label>
                    <select id="account-servers-instances" class="block w-full border border-gray-300 rounded-md mt-1 px-3 py-2"></select>
                        <div class="mt-5">
                            <a id="account-server-instance-link" href="#" class="inline-block bg-black text-white rounded-full px-5 py-2 hover:bg-gray-800" target="_blank">Edit saved data</a>
                        </div>
                </div>
            </div>
            <div class="user-guest hidden">
                <h2 class="text-2xl font-bold">Load data for your Server<br>and instance</h2>
                <a href="https://stakers.space/dashboard/authentization?r=" class="inline-block bg-black text-white rounded-full px-5 py-2 mt-4 hover:bg-gray-800">Sign In</a>
            </div>
        </div>
        <div>
            <ul class="list-none space-y-0 my-4 pl-5">
                <li><label class="font-semibold">Instance ID</label>: <input type="number" value="1" class="interactive-element instance_pid border border-gray-300 rounded-md px-3" data-class="instance_pid"{{!-- data-client="{{client}}"--}}></li>
                <li><label class="font-semibold">Fee Recipient wallet</label>: <input type="text" value="0xXXXX" class="interactive-element instance_frw" data-class="instance_frw"{{!-- data-client="{{client}}"--}}></li>
                <li>
                    <span class="font-semibold">Validator Instance service config</span>
                    <ul class="list-disc my-4 pl-10">
                        <li><label class="font-semibold">Name</label>: <input type="text" value="{{servicePrefix}}{{client}}-vi1" class="interactive-element instance_sn border border-gray-300 rounded-md px-3" data-class="instance_sn"{{!-- data-client="{{client}}"--}}></li>
                        <li><label class="font-semibold">User</label>: <input type="text" value="{{servicePrefix}}{{client}}-vi1" class="interactive-element instance_su border border-gray-300 rounded-md px-3" data-class="instance_su"{{!-- data-client="{{client}}"--}}></li>
                        <li><label class="font-semibold">Data</label>: 
                            <input type="text" value="/var/lib{{slashChain}}/{{client}}/vi1" class="interactive-element instance_dp border border-gray-300 rounded-md px-3" data-class="instance_dp"{{!-- data-client="{{client}}"--}}>
                        </li>
                    </ul>
                </li>
            </ul>
        </div>
    </div>
</div>

    <script>
    /*
        Update Instance Numbers based on manual change
    */
    var instance_id_elms = document.getElementsByClassName("instance_pid");
    for(const elm of instance_id_elms){ 
        elm.onchange = function(e){
            const targetedInstanceId = Number(e.target.value);
            console.log("On instance_pid change | targeted InstanceId", targetedInstanceId);
            if(!serverData) serverData = {instances: []};

            serverData.instances[0] = {
                vi_pid: targetedInstanceId,
                vi_sname: replaceNumberAtEnd(document.getElementsByClassName("instance_sn")[0].value, targetedInstanceId),
                vi_suser: replaceNumberAtEnd(document.getElementsByClassName("instance_sn")[0].value, targetedInstanceId),
                vi_sdata: replaceNumberAtEnd(document.getElementsByClassName("instance_dp")[0].value, targetedInstanceId),
                fee_recipient: document.getElementsByClassName("instance_frw")[0].value
            };
            
            // update data keystores directory
            const datakeystoresElms = document.querySelectorAll('[data-class="ddkeys-path"]');
            datakeystoresElms.forEach(element => {
                element.value = replaceNumberAtEnd(element.value, targetedInstanceId);
            });

            LoadInstanceDataToDocs();
        };
    }

    function replaceNumberAtEnd(str, newNumber) {
        return str.replace(/\d+$/, newNumber);
    }

    function LoadInstanceDataToDocs(e){
        if(!e) { e = {target: {value: 0}}; }
        const instanceData = serverData.instances[Number(e.target.value)];
        console.log("LoadInstanceDataToDocs", serverData, e.target.value, instanceData);
        if(!instanceData) return;
        for(const elm of document.getElementsByClassName("instance_pid")){ elm.value = instanceData.vi_pid; elm.innerHTML = instanceData.vi_pid; }
        for(const elm of document.getElementsByClassName("instance_sn")){ elm.value = instanceData.vi_sname; elm.innerHTML = instanceData.vi_sname; }
        for(const elm of document.getElementsByClassName("instance_su")){ elm.value = instanceData.vi_suser; elm.innerHTML = instanceData.vi_suser; }
        for(const elm of document.getElementsByClassName("instance_dp")){ elm.value = instanceData.vi_sdata; elm.innerHTML = instanceData.vi_sdata; }
        for(const elm of document.getElementsByClassName("instance_frw")){ elm.value = instanceData.fee_recipient; }
        // update keystores directory
        try{
            document.getElementsByClassName("interactive-element ddkeys-path")[0].dispatchEvent(new Event('change'));
        } catch(e) {
            console.error("Error updating data keystores directory", e);
        }
	}

    function UpdateInstanceSetup(){
        const selectInstanceElement = document.getElementById('account-servers-instances');
		selectInstanceElement.innerHTML = "";
		for(let i = 0; i < serverData.instances.length; i++){
            const instance = serverData.instances[i];
			const ioption = document.createElement('option');
			ioption.value = i;
			ioption.text = instance.instance; 
			selectInstanceElement.appendChild(ioption);
		}
		selectInstanceElement.onchange = LoadInstanceDataToDocs;
    }
    {{#if client}}
        (function(){
            const clientNamePage = "{{client}}";
            const sn =  clientNamePage+"-vi1";
            const dp = `/var/lib/${clientNamePage}/vi1`
            for(const elm of document.getElementsByClassName("instance_sn")){
                //console.log("instance_sn", elm, "{{client}}");
                if(elm.dataset.client === "{{client}}") {
                    elm.innerHTML = sn; elm.value = sn; 
                }
            }
            for(const elm of document.getElementsByClassName("instance_su")){ 
                if(elm.dataset.client === "{{client}}"){ 
                    elm.innerHTML = sn; elm.value = sn; 
                }
            }
            for(const elm of document.getElementsByClassName("instance_dp")){ 
                if(elm.dataset.client === "{{client}}") {
                    elm.innerHTML = dp; elm.value = dp;
                }
            }
        })();
    {{/if}}
    </script>