{{> header}}
<main class="mb-60">
	<section class="cover grid egrid">
		<div class="mt-60 mb-20">
			<h1 class="cover-title"><span>Validator keys for {{chainName}} staking</span> - how to generate and deposit keystores?</h1>
			<p><strong>Complete guide to generate and deposit validator keys for {{chainName}} staking.</strong></p>
		</div>
		<div class="disclaimer">
			<div class="disclaimer-content">
				<h3>Disclaimer</h3>
				<p>This guide is for informational purposes only. The author nor website owner does not guarantee accuracy of the information in this guide and is not responsible for any damages or losses incurred by following the guide.</p>
            </div>
		</div>
	</section>

	<div class="grid-full contents wiki">
        <div class="content-chapters">
			<div class="sticky">
				 <nav class="mt-60">
					<strong>Navigation:</strong>
                    <ul>
                        <li><a href="#intro">Intro</a></li>
                        <li><a href="#generate">Generate</a></li>
                        <li><a href="#deposit">Deposit</a></li>
                    </ul>
				</nav>
			</div>
		</div>
	
		<div class="content-body">
			<section class="chapter" id="intro">

				<div class="content">
                    <h2 class="mt-0">What are validator keys (keystores) in {{chainName}}?</h2>
                    <p>Validation keys, also known as validator keys or kezstores, are essential cryptographic keys used in {{chainName}}’s Proof of Stake (PoS) mechanism. These keys are associated with validators, which are entities responsible for proposing and attesting blocks on the Ethereum blockchain.</p>
                    <h3>Key Points About Validation Keys and Validators:</h3>
                    <ol>
                        <li><h4>Registration and Activation</h4>
                            Validators are registered and activated on the network after depositing the required stake. This deposit acts as collateral to ensure honest behavior.
                        </li>
                        <li><h4>Staking Mechanism</h4>
                            The deposited funds are not sent directly to the validator but are instead locked in a smart contract associated with the validator's public key. This smart contract enforces the rules of staking, such as slashing penalties for misbehavior.
                        </li>
                        <li><h4>Penalties and Rewards</h4>
                            Validators can lose part of their stake (slashing) if they act maliciously or fail to perform their duties. Conversely, they earn rewards for participating honestly in block proposals and attestations.
                        </li>
                        <li><h4>Withdrawal Process</h4>
                            When a validator exits the network, the funds locked in the smart contract are automatically sent to the withdrawal wallet specified during the generation of the validation keys.
                        </li>
                    </ol>
                    <p>By securely managing their validation keys, validators can ensure their participation in the network is both safe and compliant with {{chainName}}’s PoS protocol.</p>
				</div>
            </section>

            <section class="chapter" id="generate">
				<div class="content">
                    <mark>Note: This page is under construction.</mark>
                    <h2 class="mt-0">Generate validator keys</h2>
                    <p>Validator keys and their associated deposit data are generated securely on an offline computer to minimize the risk of key compromise. The process is based on a seed phrase and typically involves the following steps:</p>
                    <ul>
                        <li><h3>Prepare an Offline Environment</h3>
                            <p>Use a dedicated offline computer or operating system to ensure that the keys are generated in a secure and isolated environment.</p>
                            <ul>
                                <li>You can e.g. install a dedicated Ubuntu Desktop on USB stick and use it to load Ubuntu Desktop on any PC unplagged to the internet and other drivers</li>
                                <li>You can look also at <a href="https://tails.net/" target="_blank" rel="nofollow noopener noreferrer">Tails OS</a>.</li>
                            </ul>
                        </li>
                        <li><h3>Prepare a Key Generation Tool on the Offline PC</h3>
                            <ol>
                                <li>Download the Key generation tool for OS you use on your offline PC
                                    <ul>
                                    {{#if isGnosis}}
                                        <li><a href="https://github.com/gnosischain/validator-data-generator/releases" target="_blank" rel="nofollow noopener noreferrer">Validator Data Generator for generating keystores for Gnosis chain</a></li>
                                    {{else}}
                                        <li><a href="https://github.com/ethereum/staking-deposit-cli/releases" target="_blank" rel="nofollow noopener noreferrer">Staking Deposit Cli for generating keystores for Ethereum chain</a></li>
                                    {{/if}}
                                    </ul>
                                </li>
                                <li>Uncompress the downloaded client</li>
                                <li>Move uncompressed client to your offline PC. You can use a flash disc to do so.</li>
                                <li>What will be withdrawal address for your validators? <input type="text">
                                    <i>Note: copy this address to your offline PC you will be generating keystores on as well.</i>
                                </li>
                                <li>On the Offline PC, open terminal or command line from a directory you have the deposit tool in (or use an relative or absolute path to the deposit cli) to run preferred command below:</li>
                            </ol>
                        </li>
                    </ul>

                    <div class="tabselector mt-20">
						<nav class="egrid egrid-2">
							<button class="tab selected" data-tabpanel="1" type="button">Generate from new mnemonic</button>
							<button class="tab" data-tabpanel="2" type="button">Generate from existing mnemonic</button>
						</nav>
						<div class="tabpanel selected screen">
                            <p>This option creates a new mnemonic and generates keystores based on that.</p>
<pre><code>./deposit new-mnemonic --eth1_withdrawal_address 0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></pre>
<p>The output will be something like:</p>
<code>Please choose your language ['1. العربية', '2. ελληνικά', '3. English', '4. Français', '5. Bahasa melayu', '6. Italiano', '7. 日本語', '8. 한국어', '9. Português do Brasil', '10. român', '11. Türkçe', '12. 简体中文']:  [English]:</code>
<p>Choose preferred langage or press enter to confirm default option <code>English</code></p>
							{{#if isEthereum}}
                            <p>As you define withdrawal wallet, you will see also <code>**[Warning] you are setting an Eth1 address as your withdrawal address. Please ensure that you have control over this address.**</code>.</p>
                            {{/if}}
<p>Now the tool should print a seed (24 words). Carefully write them down on a paper and keep it carefully. This is a recovery seed based on which you can regenerate keystores if anything goes wrong in a time (e.g. your node gets broke).</p>
<p>After that, you will be asked to write the words back to client to verify you have them, see below</p>
						</div>
						<div class="tabpanel screen">
                            <p>This option requires placement of a mnemonic and generates keystores based on that.</p>
<pre><code>./deposit existing-mnemonic --eth1_withdrawal_address 0xXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX</code></pre>
<p>The output will be something like below:</p>
<code>Please choose your language ['1. العربية', '2. ελληνικά', '3. English', '4. Français', '5. Bahasa melayu', '6. Italiano', '7. 日本語', '8. 한국어', '9. Português do Brasil', '10. român', '11. Türkçe', '12. 简体中文']: [English]:
</code>
<p>Choose preferred langage or press enter to confirm default option <code>English</code></p>
<p>Next, it will require the seed mnemonic, se below:</p>
						</div>
                        <pre><code>Please enter your mnemonic separated by spaces (" "). Note: you only need to enter the first 4 letters of each word if you'd prefer.: </code></pre>
                        <p>Write your seed and press enter.</p>  
                        <ul>
                            <li>Next, it will require starting index, see <code>Enter the index (key number) you wish to start generating more keys from. For example, if you've generated 4 keys in the past, you'd enter 4 here. [0]: </code>
                                <p>There is always the same validator <code>pubid</code> for a combination of the same <code>seed</code> + <code>validator index</code>. This is the way you can regenerate lost keystores. Also, you can generate othe keystores (with higher index) to generate more keystores from the same seed.</p>
                            </li>
                            <li>After setting starting index, press enter and repeat it for confirmation, see
                                <pre><code>Please repeat the index to confirm: 0</code></pre>
                            </li>
                            <li>Next, it will ask how many validators you wish to run, see:
                                <pre><code>Please choose how many new validators you wish to run: 1</code></pre>
                            </li>
                            <li>Next, it will ask you for the chain, see:
                                {{#if isEthereum}}
                                <pre><code>Please choose the (mainnet or testnet) network/chain name ['mainnet', 'ropsten', 'goerli', 'kiln', 'sepolia']:  [mainnet]: </code></pre>
                                {{else}}
                                <pre><code>Please choose the (mainnet or testnet) network/chain name ['mainnet', 'ropsten', 'goerli', 'kiln', 'sepolia', 'gnosis', 'chiado']:  [gnosis]: </code></pre>
                                {{/if}}
                                <p>Confirm the option</p>
                            </li>
                            <li>Next, you will have to set a password that will be encrypt the keystores. You will need this password later for decrypting the keystores on registering them to consensus validator client.
                                <pre><code>Create a password that secures your validator keystore(s). You will need to re-enter this to decrypt them when you setup your Ethereum validators.: </code></pre>
                                <p>Then you will have to repeate it yet, see</p>
                                <pre><code>Repeat your keystore password for confirmation: </code></pre>
                            </li>
                            <li>If anything went well, keystores generation is preocessed with following output (output below is for a sample of generating only one validator key):
                                <pre><code>                                          
                  #####     #####                                 
                ##     #####     ##                               
    ###         ##   #######     #########################        
    ##  ##      #####               ##                   ##       
    ##     #####                 ##                       ##      
    ##     ##                     ##                      ###     
   ########                        ##                     ####    
   ##        ##   ###         #####                       #####   
   #                          ##                         # #####  
   #                            #                        #  ##### 
   ##                             ##                    ##        
   ##                              ##                   ##        
   ##             ###              ##                   ##        
   ###############                 ##                   ##        
   ###               ##                                 ##        
      #############################                    ##         
                     ##                             ###           
                     #######     #################     ###        
                     ##   ## ##        ##   ##    ###             
                     ##############          #############        
                                                                  
Creating your keys.
Creating your keystores:	  [####################################]  1/1
Verifying your keystores:	  [####################################]  1/1
Verifying your deposits:	  [####################################]  1/1

Success!</code></pre>
                            </li>
                            <li><p class="mt-30">The output is a folder including a bunch of files:</p>
                    <ul>
                        <li><code>validator_key.json</code> that represents each validator. Each validator has an unique <code>pubid</code>. These files are registered to consensus validator client on the staking server.</li>
                        <li><code>deposit_keys.json</code> that aggregates information about all generated <code>validator_key.json</code> files. This file is used for depositing through the web interface.</li>
                    </ul>
                    <p>Each file name ends with a series of numbers, known as a timestamp, which represents the time the file was generated. If you check this timestamp in a human-readable format in CET (Central European Time), you can input these numbers into a timestamp converter or tool below.</p>
                    <div>
                       Timestamp: <input type="number" value="" id="timestamp"> → <code id="timestamp-cet">Mon Jan 27 2025 17:28:30 GMT+0100 (středoevropský standardní čas)</code>
                       <script>
                            var timestamp = document.getElementById("timestamp"),
                                timestampCET = document.getElementById("timestamp-cet")
                            timestamp.value = new Date().getTime();
                            function UpdateTimestamp(){ 
                                var d = new Date(Number(timestamp.value));
                                if(d.getFullYear < 1970) d = d * 1000;
                                timestampCET.innerHTML = new Date(d); 
                            }
                            UpdateTimestamp();
                            timestamp.addEventListener("change", UpdateTimestamp);
                        </script>
                    </div>
                        <p> Copy the output folder to flash disk for option move them from your offline machine to your staking node and PC you will be depositing from.</p></li>
                        </ul>
					</div>
                    
				</div>
            </section>

            <section class="chapter" id="deposit">

				<div class="content">
                    <mark>Note: This page is under construction.</mark>
                    <h2 class="mt-0">Deposit validator keys</h2>
                    <p>The funding of keys (deposit) can be done through the website {{#if isGnosis}}<a href="https://deposit.gnosischain.com/" target="_blank" rel="nofollow noopener noreferrer">https://deposit.gnosischain.com/</a>{{else}}<a href="https://launchpad.ethereum.org/en/" target="_blank" rel="nofollow noopener noreferrer">https://launchpad.ethereum.org/en/</a>{{/if}}.. Funds should be deposited only after the keys have been activated on the server.</p>
                    {{#if isGnosis}}
                    <p>The deposit process and verification details can be found at <a href="https://docs.gnosischain.com/node/guide/validator/deposit" target="_blank" rel="nofollow noopener noreferrer">https://docs.gnosischain.com/node/guide/validator/deposit</a>. It is possible to deposit for a maximum of 128 validators in a single transaction. The deposit_data-... file is uploaded to the web interface. If the file contains instructions for more than 128 validators, it must be split into smaller parts.</p>
                    <div class="tabselector mt-20">
						<nav class="egrid egrid-2">
							<button class="tab selected" data-tabpanel="1" type="button">SafeWallet</button>
							<button class="tab" data-tabpanel="2" type="button">Metamask</button>
						</nav>
						<div class="tabpanel selected screen">
                           <h3>How to Verify in SafeWallet</h3>
                            <p>Partial files such as deposit_data_1.json... are uploaded through the website <a href="https://deposit.gnosischain.com/" target="_blank" rel="nofollow noopener noreferrer">https://deposit.gnosischain.com/</a>. Each file is uploaded individually, and after successful validation, the deposit can be completed using either Metamask or Wallet Connect.</p>
                            <h3>Pre-upload Check</h3>
                            <p>Before uploading, always open the specific file and use search to verify the filled-in "withdrawal credentials", which should point to the withdrawal wallet. In the file, the x at the beginning of the address is replaced by a series of ones and zeros – this is normal. Use the search box (Ctrl+F) to find the wallet address, but input it without the first two characters.</p>
                            <h4>When Sending the Transaction via Web</h4>
                            <p>The following must be checked:</p>
                            <ol>
                                <li>Withdrawal Addresses in the Deposit File
                                    <ul>
                                        <li>Open the deposit file in a text editor and verify the withdrawal addresses.</li>
                                        <li>Note the number of objects (see point 5). Keep in mind that the address lacks the human-readable 0x prefix.</li>
                                    </ul>
                                </li>
                                <li>Transaction Method is <code>transferAndCall</code></li>
                                <li>Interact With GNOSIS GNO Token Contract Address <code><a href="https://gnosisscan.io/address/0x9c58bacc331c9aa871afd802db6379a98e80cedb" target="blank" rel="nofollow noopener noreferrer">0x9C58BAcC331c9aa871AFD802DB6379a98e80CEdb</a></code> (= you sending <code>GNO</code> token)</li>
                                <li>Deposit Contract Address (_to(address)) is Gnosis: GBC Deposit <code><a href="https://gnosisscan.io/address/0x0B98057eA310F4d31F2a452B414647007d1645d9">0x0B98057eA310F4d31F2a452B414647007d1645d9</a></code></li>
                                <li>Number of Validators (_value(uint256)) corresponds with sending GNO amount</li>
                                <li>The Hex data contain the withdrawal wallet and validator pubkeys. You can use (Command/Ctrl + F) to search and locate strings in the hex data. Note: Hex format does not include <code>0x</code> prefix.</li>
                            </ol>
						</div>
						<div class="tabpanel screen">
                            <h3 class="mt-30">How to Verify in Metamask</h3>
                            <ul>
                                <li>Check Interact With Contract Address is <code><a href="https://gnosisscan.io/address/0x9c58bacc331c9aa871afd802db6379a98e80cedb" target="blank" rel="nofollow noopener noreferrer">0x9C58BAcC331c9aa871AFD802DB6379a98e80CEdb</a></code> (= you sending <code>GNO</code> token)
                                    <p>To speed up verification for repeating deposits, you save this address in Metamask under a custom name, e.g., "GNO Deposit."</p>
                                </li>
                                <li>Check Transaction Type is <code>transferAndCall</code></li>
                                <li>Switch to the Hex Tab and use search (Command/Ctrl + F) to locate the following strings in the hex data. Verify Deposit Contract Address (_to(address)) is Gnosis: GBC Deposit <code><a href="https://gnosisscan.io/address/0x0B98057eA310F4d31F2a452B414647007d1645d9">0x0B98057eA310F4d31F2a452B414647007d1645d9</a></code>, withdrawal wallet and pubids.</li>
                            </ul>
						</div>
                    </div>
                    {{/if}}
				</div>
            </section>
        </div>
    </div>
</main>
{{> footer}}
{{> scripts/tabselector}}