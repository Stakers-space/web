{{> header}}
<main class="mb-60">
	<section class="cover grid egrid">
		<div class="mt-60 mb-20">
			<h1 class="cover-title"><span>Interactive Solo {{chainName}} staking</span> guide for Ubuntu OS</h1>
			<p><strong>Complete guide to stake one as well as thousands of validators on multiple chains through a single staking node.</strong> Simply made, interactive, well explained. The guide on thsi webpage is focused on staking {{chainName}}.</p>
		</div>
		<div class="disclaimer">
			<div class="disclaimer-content">
				<h3>Disclaimer</h3>
				<p>This guide is for informational purposes only. The author nor website owner does not guarantee accuracy of the information in this guide and is not responsible for any damages or losses incurred by following the guide.</p>
            </div>
		</div>
	</section>

	<div class="grid-full contents serverguide">
        <div class="content-chapters">
			<div class="sticky">
				 <nav>
					<strong>Solo staking guide</strong>
					<ol>
						<li><a href="#hardware">Hardware & OS</a></li>
						<li><a href="">Securying server</a></li>
						<li><a href="">Setting Basic conf</a></li>
						<li><a href="">Jwtsecret</a></li>
						<li>Install & configurate clients
							<ul>
								<li><a href="#execution">Execution client</a></li>
								<li><a href="#consensus">Consensus client</a>
									<ul>
										<li><a href="#beacon">Beacon</a></li>
										<li><a href="#validator">Validator</a></li>
									</ul>
								</li>
							</ul>
						</li>
						<li>Run a Validator</li>
						<li>Updating clients</li>
						<li>Exit validators</li>
					</ol>
				</nav>
			</div>
		</div>
		<div class="content-header">
			{{> guides/serverSelection }}
		</div>
		<div class="content-panel">
			<div class="sticky">
				{{> guides/variablesOverview }}
			</div>
		</div>
		<div class="content-body">			
			<section class="chapter" id="prerequisites">
				<div class="content" style="width:100%;padding-top:10px">
					<h2 data-number="Â°">Prerequisites for this {{chainName}} staking</h2>
					<ol>
						<li><p>Staking Node for {{chainName}} staking, see</p>
							<a href="/{{chainUrl}}/staking-hardware" class="btn btn-black btn-rounded">options and guides for Staking Node</a>
						</li>
						<li><p>Access to Staking Node Operating System</p></li>
						<li><p>Interest in staking</p></li>
					</ol>
				</div>
            </section>

            <section class="chapter mt-60" id="secure">
				<div class="content bt" style="width:100%">
                    <h2 data-number="1">Securying Ubuntu OS</h2>
					<p>In the matter of security, you must think about the way you are going to connect to / access your node - see the guide below.</p>

					<h3>Upgrade & update on the latest software and security updates.</h3>
					<pre><code>$ sudo apt -y update && sudo apt -y upgrade
$ sudo apt dist-upgrade && sudo apt autoremove
$ sudo reboot</code></pre>
					<p>You can also create a shell script that will do this either on manual request or a schedule, see <a href="https://github.com/Stakers-space/staking-scripts/tree/main/utils/update-and-restart-linux" target="_blank">Update and Restart Ubuntu server Utility</a>.</p>
						
					<div>
						<h3>Install UFW, configurate <code>deny</code> state for incoming and <code>allow</code> state for outgoing traffic</h3>
						<ul>
							<li>Install UFW (if not installed yet)
								<pre><code>sudo apt install ufw</code></pre></li>
							<li>Set default Fireall configuration
        						<pre><code>sudo ufw default deny incoming
sudo ufw default allow outgoing</code></pre>
							</li>
						</ul>
						<p><strong>NOTE: Firewall will be activated later, after adding additional configuration in next steps.</strong></p>
					</div>

					<div>
						<h3 class="mt-40" id="securyiing-ssh">Managing the SSH access</h3>
						<ul>
							<li>SSH allows to connect to the server either from the local or remote network.</li>
							<li>If you are going to connect your node locally only (= with monitor and keyboard connected right in the node), you do not need to install SSH or you can simply disable it, if is already installed.</li>
						</ul>

						<h4 class="mt-20" id="ssh-install">Check, whether <code>SSH</code> is installed on the server</h4>
						<pre><code>which sshd</code></pre>
						<p>This command should print directory of the <code>SSH</code> service. If it prints an empty response, <code>SSH</code> is not installed on the server and thus connecting to server over <code>SSH</code> is not possible. If required, <code>SSH</code> can be installed with following command:</p>
						<pre><code>sudo apt install openssh-server</code></pre>

						<div class="tabselector mt-40">
							<nav class="egrid egrid-2">
								<button class="tab selected" data-tabpanel="1">Securying SSH access</button>
								<button class="tab" data-tabpanel="2">Disabling SSH access</button>
							</nav>

							<div class="tabpanel selected">
								<p>With allowed SSH access, you must protect SSH access to your server from attackers. Based on your network confifuration, access may be possible from:</p>
								<ul>
									<li>From any network (Your server has public IP)</li>
									<li>From a local network only (Your server is behind nat)</li>
									<li>From a VPN network the node is assigned to</li>
								</ul>
								<p>Even if you have enabled access from a local netowk only (your node is behind <a href="https://vrealmatic.com/mikrotik-router/firewall/nat">NAT</a>), you should still protect your SSH access as a potential attacker may use a compromised device in your local network to access your node. The defense consists in increasing the number of obstacles that must be overcome to access your node.</p>
								<ul>
									<li><a href="#ssh-keys">Configurate SSH keys</a></li>
									<li><a href="#ssh-port">Modify default SSH port</a></li>
									<li><a href="#2fa">Configurate 2FA authentization</a></li>
									<li><a href="#ddos">Configurate Brute-force & DDoS protection</a></li>
									<li><a href="#remote-access">Additional tips</a></li>
								</ul>
								<p><strong>Before configuring security matters and connecting to your node,</strong> take note the basic rule to maintain also the security of the computer(s) you are going to use for connecting to your node (stealing the SSH keys) as well as other devices required for connection (stealing 2FA codes) etc.</p>
								<ul>
									<li id="ssh-keys">
										<h4>Configure SSH keys</h4>
										<p>By default, SSH connections can be made using a combo of <code>username</code> and <code>password</code>. As <code>password</code> is usually somewhat "short" and thus susceptible to brute-force attacks, key loggers attacks and so on. This is why SSH keys significantly enhances the security of the login process.</p>
										<a href="https://vrealmatic.com/ubuntu-server/ssh-keys" target="_blank" class="btn btn-black btn-rounded">SSH keys step by step guide.</a>
									</li>
									<li class="mt-40" id="ssh-port">
										<h4>Modify default <code>22</code> SSH port</h4>
										<p>As port <code>22</code> is default port for SSH connections, it's the first port that a potential attacker tests. Change it to a different free port.</p>
										<ol>
											<li>
												<p>Choose any number between <code>21</code> and <code>49151</code></p>
												<strong>Choose a port number for SSH:</strong> <input data-type="number" type="text" data-min="21" data-max="49151" value="22" class="interactive-element sshPort" data-class="sshPort">
											</li>
											<li class="mt-20">
												Check whether the selected port for SSH is not already in use
												<pre><code>sudo ss -tulpn | grep ':<mark class="sshPort">22</mark>'</code></pre>
												<ul>
													<li>blank response = port is not in used</li>
													<li>red text response, the port is already in used. Check availability of a different port number in such case.</li>
												</ul>
											</li>
											<li class="mt-15">Change SSH port from default <code>22</code> to <code class="sshPort">22</code> in the SSH config file
												<ol>
													<li class="mt-10">
														Open <code>sshd_config</code> config file
														<pre><code>sudo nano /etc/ssh/sshd_config</code></pre>
													</li>
													<li class="mt-10">
														<p>Find mark <code>Port</code>, usually <code>Port 22</code>. The mark specifies currently port used for SSH access.</p>
														<p><strong>Rewrite the port value for <code>Port <span class="sshPort"></span></code></strong></p>
													</li>
													<li class="mt-10">Press <code>CTRL</code> + <code>X</code> then <code>Y</code> then <code>ENTER</code> to save and exit the config file.</li>
												</ol>
											</li>
											<li class="mt-15">Enable the Port <code class="sshPort">1024</code> for SSH/TCP connection
												<pre><code>sudo ufw allow <mark class="sshPort">1024</mark>/tcp</code></pre>
											</li>
											<li class="mt-15">Restart the SSH service to reflect the changes.
												<pre><code>sudo systemctl restart ssh</code></pre>
												<p>After the restart, you will not able to connect through the SSH over port <code>22</code> anymore. Be sure you are connecting over the <code class="sshPort">1024</code> next time.</p>
											</li>
											<li class="mt-15">Disable the default <code>22</code> port for SSH/TCP connection
												<pre><code>sudo ufw deny 22/tcp</code></pre>
											</li>
											<li class="mt-15">Check your port settings if needed
												<pre><code>sudo ufw status numbered</code></pre>
											</li>
										</ol>
										<p><strong>NOTE: If you are facing an issue to sign in over SSH after changing the port, try reboot the staking node and sign in again.</strong></p>
									</li>
									<li class="mt-40" id="2fa">
										<h4>Configuring 2FA authentization</h4>
										<p>2FA (2 Factor authentization) comes with additional code you must provide to access your node. You may know 2FA from crypto exchanges. In the same way you can protect loging to your node.</p>
										<a href="https://vrealmatic.com/ubuntu-server/2fa-google-authenticator" target="_blank" class="btn btn-black btn-rounded">2FA Google Authentication activation guide.</a>
									</li>
									<li class="mt-40" id="ddos">
										<h4>Configuring Brute-force & DDoS protection</h4>
										<p>To defend against Brute Force and DDoS attacks, one can monitor incoming connections and block IP addresses that repeatedly attempt to log in with incorrect credentials. Installing the Fail2Ban package can assist with this.</p>
										<a href="https://vrealmatic.com/ubuntu-server/fail2ban" target="_blank"  class="btn btn-black btn-rounded">Guide to activate Fail2Ban.</a>
									</li>
								</ul>
								
								<h3 class="mt-50" id="remote-access">Securying remote access tips</h3>
								<ul>
									<li>Staking node is accessible from public IP:
										<ul>
											<li>If you do not need o connect to your node from remote networks, move your node behind the router that prevents accessing the node.</li>
											<li>If you want to keep this feature, you should still consider move the node behind the router, <a href="https://vrealmatic.com/mikrotik-router/vpn" target="_blank">set VPN on the router</a>, and when connecting to the node, firstly connect to the router VPN and then connect the node from "local" network through its local IP.</li>
										</ul>
									</li>
									<li>Staking node is not accessible from public IP:
										<ul>
											<li>If you need connecting your node from remote networks, you must either set a VPN, such as Tailscale (either on the server itself or any other device in your local network), or buy public IP from your ISP and follow the points for server accessible from the public IP.</li>
										</ul>
									</li>
								</ul>
							</div>

							<div class="tabpanel">
								<p><a href="#ssh-install">If you have <code>SSH</code> installed and running on your server</a>, you must either disable ports for SSH traffic, disable SSH or remove it. If <code>SSH</code> is not installed on your machine, you can skip this step - ssh access is not possible already.</p>
								<ul>
									<li><h4>Option 1: Stop and disable the ssh service</h4>
										<pre><code>sudo systemctl stop ssh
sudo systemctl disable ssh</code></pre>
										<p>If preferred, you can remove the SSH server client from the machine</p>
										<pre><code>sudo apt remove openssh-server</code></pre>
									</li>
									<li><h4>Option 2: Disable traffic on SSH port</h4>
										<p>Check <code>22/tcp</code> port for enabled traffic with command</p>
										<pre><code>sudo ufw status numbered</code></pre>
										<p>Note: default <code>22</code> port could be changed, as well as could not be enabled. If there's any <code>tcp</code> traffic enabled, disable it. Code below is for default SSH port <code>22</code>.</p>
										<pre><code>sudo ufw deny 22/tcp</code></pre>
									</li>
								</ul>
							</div>
						</div>
					</div>

					<h3 class="mt-40">Configure the Firewall</h3>
					<ul>
						<li>Enable Firewall
							<pre><code>$ sudo ufw enable</code></pre>
						</li>
						<li>Check Firewall Ports
							<pre><code>sudo ufw numbered</code></pre>
						</li>
					</ul>

					<h3 class="mt-50">Consider installing and setting VPN to hide your public IP</h3>
					<p>VPN allows the server to access the internet through an intermediary in a form of a VPN server. In such case, your server's IP address (and location) is hidden behind the VPN server IP address. The disadvantage is the potential instability of the VPN server, in terms of connection speed and possible crashes into offline state.</p>
					<a href="https://vrealmatic.com/ubuntu-server/mullvad-vpn" target="_blank"  class="btn btn-black btn-rounded">Complete guide to install, configurate and activate Mullvad VPN on Ubuntu server.</a>
					<p>Note: If you need to have active Mullvad and Tailscale simultaneously, follow a <a href="https://github.com/Stakers-space/staking-scripts/tree/main/mullvad/enable_tailscale" target="_blank">guide for setting rules for netfilter</a>.</p>

				</div>
            </section>

             <section class="chapter mt-60" id="basic-setup">
				<div class="content bt">
                    <h2 data-number="2">Check / set basic config for your node machine</h2>
					<ul>
						<li>Check, you are not logged in as <code>root</code>. If so, create a new user with <code>sudo</code>, see section <a href="/{{chainUrl}}/staking-hardware">Staking on rented hardware</a></li>
						<li class="mt-15">Check a <code>swap</code> space 
							<pre><code>free -h</code></pre>
							<p>If there's no <code>swap</code> space created on your node, <a href="#">configurate a swap space</a>.</p>
						</li>
						<li class="mt-15">Check <code>timedatectl</code> service for option to synchronize time
							<p>Check current state:</p>
							<pre><code>timedatectl status</code></pre>
							<ul>
								<li><code>NTP service</code> must be <code>active</code>. If not, run <code>sudo timedatectl set-ntp on</code></li>
								<li><code>System clock synchronized</code> must be <code>yes</code>. If not, and you have active VPN client, <a href="https://github.com/Stakers-space/staking-scripts/tree/main/mullvad/split-tunnel" target="_blank">set a split tunnel for <code>timedatectl</code> service.</a></li>
							</ul>
						</li>
						<li class="mt-15">Create <code>downloads</code> directory in your machine
							<pre><code>mkdir ~/downloads</code></pre>
							<p>This folder will be used for downloading clients</p>
						</li>
					</ul>
                </div>
            </section>

			<section class="chapter mt-60" id="cauthkey">
				<div class="content bt" style="width:100%;">
                    <h2 data-number="3">Generate Client Authentication Secret for {{chain}}</h2>
					<ul>
						<li>Create a new directory for <code>jwtsecret</code> files
							<pre><code>sudo mkdir -p /var/lib/jwtsecret</code></pre>
						</li>
						<li>Generate the JWT file using the openssl cryptography software library.
							<pre><code>openssl rand -hex 32 | sudo tee /var/lib/jwtsecret/<mark>{{chain}}</mark>.hex > /dev/null</code></pre>
						</li>
						<li>Check the generated authentication secret
							<pre><code>$ nano /var/lib/jwtsecret/<mark>{{chain}}</mark>.hex</code></pre>
							Press <code>CTRL</code> + <code>X</code> to exit the config file.
						</li>
					</ul>
                </div>
            </section>

			<aside class="chapter mt-60">
                <div class="content bt" style="width:100%;" class="grey">
                    <p>Perfect, now we can move on configuring individual clients</p>
					<h3>Default vs custom settings for staking clients</h3>
					<p>Default settings is great. It's absolutely preferred to start with first clients running in the default settings. Sometimes later, when you want e.g. switch at other client, you can use a custom settings for this new client only. This applies also for settings clients on another chain. The custom options below allow all this. Anyway, if you are a beginner, just ignore the ports settings and so on and use the default options everywhere.</p>
					<ol>
						<li><a href="#execution">Installing Execution client</a></li>
						<li><a href="#consensus">Installing Consensus client</a></li>
					</ol>
				</div>
            </aside>

            <section class="chapter mt-60" id="execution">
				<div class="content bt">
                    <h2 data-number="4">Install and configurate preferred execution client</h2>
					<div class="tabselector">
						<nav class="egrid egrid-4">
							<button class="tab selected" data-tabpanel="1" onclick="OnExecutionClientChanged('nethermind')">
								{{!--<div class="mb-10">
									<img src="/logo/nethermind.webp" alt="Nethermind">
								</div>--}}
								Nethermind
							</button>
							<button class="tab" data-tabpanel="2" onclick="OnExecutionClientChanged('erigon')">
								{{!--<div class="mb-10">
									<img src="/logo/erigon.svg" alt="Erigon">
								</div>--}}
								Erigon
							</button>
							<button class="tab" data-tabpanel="3" onclick="OnExecutionClientChanged('geth')">
								Geth
							</button>
							<button class="tab" data-tabpanel="4" onclick="OnExecutionClientChanged('reth')">
								Reth
							</button>
						</nav>
						<div class="tabpanel selected">
{{> clients/nethermind_cli InstallationGuide=true }}
{{> clients/nethermind_cli_config }}
						</div>
						<div class="tabpanel">
{{> clients/erigon_cli InstallationGuide=true }}
{{> clients/erigon_cli_config }}
						</div>
						<div class="tabpanel">
							<p>Soon</p>
						</div>
						<div class="tabpanel">
							<p>Soon</p>
						</div>
					</div>
                </div>
				<script>
					function OnExecutionClientChanged(value){
						document.getElementById("ec_1").value = value;
					}
				</script>
            </section>

             <section class="chapter mt-60" id="consensus">
				<div class="content bt">
                    <h2 data-number="5">Consensus client</h2>
					<aside>
						{{> clients/config/consensusclient-portselection}}
					</aside>
					<h3 class="mt-60">Install Consensus client</h3>
					<div class="tabselector">
						<nav class="egrid egrid-3">
							<button class="tab selected" data-tabpanel="1" onclick="OnConsensusClientChanged('lighthouse')">Lighthouse</button>
							<button class="tab" data-tabpanel="2" onclick="OnConsensusClientChanged('lodestar')">Lodestar</button>
							<button class="tab" data-tabpanel="3" onclick="OnConsensusClientChanged('teku')">Teku</button>
						</nav>

						<div class="tabpanel selected">
{{> clients/lighthouse_cli InstallationGuide=true }}
<h3 class="mt-60">Configurate Lighthouse Beacon service</h3>
{{> clients/lighthouse_cli_config PortSelection=false}}
						</div>
						<div class="tabpanel">
{{> clients/lodestar_cli InstallationGuide=true }}
<h3 class="mt-60">Configurate Lodestar Beacon service</h3>
{{> clients/lodestar_cli_config PortSelection=false}}
						</div>
						<div class="tabpanel">
{{> clients/teku_cli InstallationGuide=true }}
<h3 class="mt-60">Configurate Teku Beacon service</h3>
{{> clients/teku_cli_config PortSelection=false}}
						</div>
					</div>
                </div>
				<script>
					function OnConsensusClientChanged(value){
						document.getElementById("cc_1").value = value;
					}
				</script>
            </section>

			<section class="chapter mt-60">
				<div class="content bt">
					<h2 data-number="6">Continue with your Staking option preference</h2>
					<div>
						<a href="full-guide/solo"><h3>Solo Staking</h3></a>
						<a href="full-guide/stakewise"><h3>Stakewise Staking</h3></a>
						{{#if isEthereum}}
						<a href="full-guide/rocketpool"><h3>Rocketpool Staking</h3></a>
						<a href="full-guide/lido"><h3>Lido Staking</h3></a>
						{{/if}}
					</div>
				</div>	
			</section>
        </div>
    </div>
</main>
{{> footer}}
{{> scripts/tabselector}}