<style>
.encrypted_value {
    word-wrap: break-word;
    overflow-wrap: break-word;
}
ul.img-marker li {
    max-height: 105px;
    overflow-y: clip;
}
</style>
{{> header_dashboard}}
<main class="mt-5">
    {{> sections/encryptionPassword }}
    <div class="mx-auto px-5 md:px-15 xl:px-24 mt-10">
        <div id="overview" class="grid gap-6 md:grid-cols-3">
            <div>
                <ul class="img-marker inline-flex gap-12 m-0 p-0 account_validators">
                    <li style="--marker-image: url('/logo/ethereum.svg')" class="font-bold">??</li>
                    <li style="--marker-image: url('/logo/gnosis.svg')" class="font-bold ml-12"> ??</li>
                </ul>
            </div>
            <div>
                {{{offlineStateInfo}}}
            </div>
            <div class="flex items-center gap-3 flex-wrap">
                Data for epoch: 
                <ul class="inline-flex list-none gap-3 m-0 p-0">
                    <li>E: <a href="https://beaconcha.in/epochs" target="_blank" rel="nofollow noopener noreferrer" class="underline underline-offset-2 hover:no-underline {{#unless lastEpocSyncState.ethereum}}text-orange-500 underline-offset-2{{/unless}}" title="{{#unless lastEpocSyncState.ethereum}}Warning: Data are not up to date{{/unless}}">{{lastEpochReported.ethereum}}</a></li>
                    <li>G: <a href="https://gnosischa.in/epochs" target="_blank" rel="nofollow noopener noreferrer" class="underline underline-offset-2 hover:no-underline {{#unless lastEpocSyncState.gnosis}}text-orange-500 underline-offset-2{{/unless}}" title="{{#unless lastEpocSyncState.gnosis}}Warning: Data are not up to date{{/unless}}">{{lastEpochReported.gnosis}}</a></li>
                </ul>
            </div>
        </div>
        
        {{#each servers}}
            <section class="grid md:grid-cols-[250px_1fr] bg-neutral-100 rounded-2xl my-5 p-4 gap-6 servers-destination">
                <div class="md:sticky md:top-0 h-fit">
                    <h2 class="text-xl font-semibold">{{this.location}}</h2>
                    <i class="text-xs block encrypted_value">{{this.location_note}}</i>
                    <ul class="list-disc my-4 pl-5 space-y-1">
                        <li>Network: <span class="encrypted_value">{{this.network}}</span></li>
                        <li>validators
                            <ul class="dest_validators img-marker mt-2 space-y-1">
                                <li style="--marker-image: url('/logo/ethereum.svg');">???</li>
                                <li style="--marker-image: url('/logo/gnosis.svg');">???</li>
                            </ul>
                        </li>
                        <li>Assets
                            <ul class="dest_assets img-marker mt-2 space-y-1">
                                <li style="--marker-image: url('/logo/ethereum.svg');">???</li>
                                <li style="--marker-image: url('/logo/gnosis.svg');">???</li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <div class="grid md:grid-cols-2 gap-6">
                    {{#each this.servers}}
                     <div class="destination-server" data-id="{{this.sid}}">
                        <h3 id="{{this.name}}" class="text-lg font-semibold">
                            <a href="/dashboard/server-node/define?id={{this.sid}}" class="underline underline-offset-2 hover:no-underline">{{this.name}}</a>
                        </h3>
                            <ul class="list-disc my-4 pl-5 space-y-1">
                                <li>Clients: 
                                    {{#each this.cliensList}}
                                    <span class="mr-2 {{#if this.rcm}}text-orange-500{{/if}}" title="{{this.rcm}}">
                                        <a href="/{{this.client}}?sid={{../this.sid}}" target="_blank"  class="underline underline-offset-2 hover:no-underline text-black">{{this.client}}</a> ({{this.ver}})
                                    </span>
                                    {{/each}}
                                <li>{{#if this.brand_name}}
                                    Operated by 
                                        {{#if this.brand_link}}<a href="{{this.brand_link}}" target="_blank" class="underline underline-offset-2 hover:no-underline">{{this.brand_name}}</a>
                                        {{else}}{{this.brand_name}}{{/if}}
                                    {{/if}} | 
                                    Last Login <code class="text-[color:{{this.login.color}}]" title="en-USA time zone">{{formatDate this.login.time}}</code></li>
                                <li>
                                    <ul class="img-marker inline-flex gap-12 server_validators">
                                        <li style="--marker-image: url('/logo/ethereum.svg')">???</li>
                                        <li style="--marker-image: url('/logo/gnosis.svg')" class="ml-12">???</li>
                                    </ul>
                                </li>
                            </ul>
                            <h3 class="text-base font-semibold mb-2">Validation instances</h3>
                            <ul class="img-marker server_instances space-y-2">
                                {{#each this.instances}}
                                    <li data-iid="{{this.id}}" data-chain="{{this.chain}}" class="val_instance" style="--marker-image: url('/logo/{{#ifEqual this.chain "gnosis"}}gnosis{{else}}{{#ifEqual this.chain "ethereum"}}ethereum{{/ifEqual}}{{/ifEqual}}.svg');">
                                        {{#ifEqual isOwner "true"}}
                                        <a href="/dashboard/server-node/define-instance?sid={{../this.sid}}&iid={{this.id}}" class="iname underline underline-offset-2 hover:no-underline">{{this.instance}}</a>
                                        {{else}}
                                        <span>{{this.instance}}</span>
                                        {{/ifEqual}} | 
                                        <span class="instance_balance"></span><span class="instance_status"></span><br>
                                        
                                        <i class="encrypted_value instance_note block max-w-[90%] overflow-hidden text-xs text-neutral-900 leading-snug break-words">{{this.note}}</i>
                                        <i class="text-xs text-neutral-900 leading-snug">
                                            {{#if this.fee_recipient}}Wlt: <a href="#" target="_blank" rel="nofollow noopener noreferrer" class="encrypted_value instance_fwlt underline underline-offset-2 hover:no-underline">{{this.fee_recipient}}</a> | {{/if}}
                                            <span class="encrypted_value instance_insight">{{this.data}}</span>
                                        </i>
                                    </li>
                                {{/each}}
                            </ul>
                            {{#ifEqual isOwner "true"}}<a href="/dashboard/server-node/define-instance?sid={{this.sid}}" class="inline-flex items-center rounded-lg bg-black text-white px-4 py-2 mt-3 hover:opacity-90">Add Instance</a>{{/ifEqual}}
                        </div>
                    {{/each}}
                </div>
            </section>
        {{/each}}
    </div>
    
    <section class="text-center my-10 space-x-2">
        <a href="/dashboard/server-node/define" class="inline-flex items-center rounded-lg bg-black text-white px-4 py-2 hover:opacity-90">Define own server node</a>
        <a href="/dashboard/server-node/order" class="inline-flex items-center rounded-lg bg-black text-white px-4 py-2 hover:opacity-90">Order server as a service</a>
        <a href="/dashboard/api" class="inline-flex items-center rounded-lg bg-black text-white px-4 py-2 hover:opacity-90">API access</a>
        <a href="/dashboard/servers-resources" class="inline-flex items-center rounded-lg bg-black text-white px-4 py-2 hover:opacity-90">Servers resources</a>
    </section>

    {{#if adminPanel}}{{{adminPanel}}}{{/if}}
</main>
{{> scripts/cryptography}}
{{> scripts/utils/xmlhttp}}
<script>
    const ramOptimized = false;
    /* In-page Offline / pending state data */
    var offlineStateData = {{{offlineStateData}}}; // offline data

    let snapshots = {};

    /* Aggregated view */
    function SectorState(isInstance = false){ 
        this.pubkeys = 0;
        this.balance = 0;
        if(isInstance) {
            this.pubIds = [];
            this.pubIds_filter = { active_ongoing: [] }
        } else { // aggregation
            this.offline = 0;
            this.pending = 0;
            this.withdrawal = 0;
        }
        this.serverIndex = null;
        this.destinationIndex = null;
    }
    let valcount_instance = { ethereum: {}, gnosis: {} };

    // Render Quick View
    (function () {
        const val_instances = document.getElementsByClassName("val_instance");
        for(var instanceElm of val_instances){
            const instanceId = instanceElm.dataset.iid;
            const chain = instanceElm.dataset.chain;

            if(!chain) {
                console.warn("No chain attached to instance id", instanceId);
                continue;
            }
            valcount_instance[chain][instanceId] = new SectorState(true);
            if(!valcount_instance[chain]["agg"]) valcount_instance[chain]["agg"] = new SectorState(false);

            if(offlineStateData[instanceId]){
                 // is defined = known issue on the instance
                const offlineCount = (offlineStateData[instanceId].o) ? offlineStateData[instanceId].o.length : 0;
                const pendingCount = (offlineStateData[instanceId].p) ? offlineStateData[instanceId].p : 0;
                const withdrawalCount = (offlineStateData[instanceId].w) ? offlineStateData[instanceId].w : 0;
               
                valcount_instance[chain]["agg"].offline += offlineCount;
                valcount_instance[chain]["agg"].pending += pendingCount;
                valcount_instance[chain]["agg"].withdrawal += withdrawalCount;
            }

            RenderInstanceCountsView(instanceId, instanceElm, valcount_instance[chain][instanceId], chain, true);
        }
    })();

    /** 
     *  Request validators data
    **/
    function GetValidatorsSnapshot(chain, state_snapshot){
        snapshots[chain] = {};
        snapshots[chain][state_snapshot] = {};
        xmlHttpRequest({type:"GET", url:`/api/state-balances?f=${chain}_${state_snapshot}.json`, credentials:false, data:null }, function(err,data){ return OnSnapshotReceived({chain, snapshot: state_snapshot}, err, data); });    
    }

    function OnSnapshotReceived(cred, err, data){
        //console.log("On Snapshot received", cred, err, data);
        snapshots[cred.chain][cred.snapshot] = JSON.parse(data);
        CalculateBalances(cred.chain);
    }

    /* callback from cryptography util */
    function OnDecryptionProcessComplted(){
        let destinationIndex = 0;
        let serverIndex = 0;
        // parse pubkeys
        for(const serverDestination of document.getElementsByClassName("servers-destination")){
            //console.log("destination:", serverDestination);
            let dest_agg_validators = {gnosis:0,ethereum:0};
            for(const server of serverDestination.getElementsByClassName("destination-server")){
                //const serverId = Number(server.dataset.id);
                let srv_agg_validators = {gnosis:0,ethereum:0};
                for(const instanceElm of server.getElementsByClassName("val_instance")){
                    const instanceId = instanceElm.dataset.iid;
                    const chain = instanceElm.dataset.chain;
                    const statusElm = instanceElm.children[1];

                    valcount_instance[chain][instanceId].destinationIndex = destinationIndex;
                    valcount_instance[chain][instanceId].serverIndex = serverIndex;
                    
                    // update fee wlt
                    const feeWltC = instanceElm.getElementsByClassName("instance_fwlt");
                    if(feeWltC.length > 0){
                        const feeWlt = feeWltC[0];
                        // set ahref
                        const explorerurl = (chain === "gnosis") ? "https://gnosischa.in/address/" : "https://beaconcha.in/address/"
                        feeWlt.href = explorerurl+feeWlt.innerHTML;
                        feeWlt.innerHTML = "..."+feeWlt.innerHTML.slice(-3);
                    }

                    const pubkeyElm = instanceElm.getElementsByClassName("instance_insight")[0];

                    if(pubkeyElm.innerHTML === "") continue;
                    if(pubkeyElm.innerHTML.indexOf("Processing") > -1) continue;

                    const pubkeys = pubkeyElm.innerHTML.split(",");
                    valcount_instance[chain][instanceId].pubIds = pubkeys;
                    
                    const validators_count = pubkeys.length;
                    valcount_instance[chain][instanceId].pubkeys = validators_count; 
                    valcount_instance[chain]["agg"].pubkeys += validators_count;

                    RenderInstanceCountsView(instanceId, instanceElm, valcount_instance[chain][instanceId], chain, false);
                    //console.log("pubkeys:", validators_count);
                    srv_agg_validators[chain] += validators_count;
                    dest_agg_validators[chain] += validators_count;
                    
                    RenderInsightLinks(pubkeyElm, chain, instanceId);
                }

                serverIndex += 1;

                RenderServerCounts(server, srv_agg_validators, "validators");
            }

            // dest level ui
            RenderDestinationCounts(serverDestination, dest_agg_validators, "validators");
            destinationIndex += 1;
        }

        // aggregation
        RenderAccountCounts("pubkeys", null);

        // UI level account (header)
        const stateCountOverviewElm = document.getElementById("overview").children[1];
        if(valcount_instance["gnosis"]["agg"].offline > 0) stateCountOverviewElm.innerHTML += `| <span style="color:red">Offline: ${valcount_instance["gnosis"]["agg"].offline} Gnosis Val</span> `;
        if(valcount_instance["ethereum"]["agg"].offline > 0) stateCountOverviewElm.innerHTML += `| <span style="color:red">Offline: ${valcount_instance["ethereum"]["agg"].offline} Ethereum Val</span> `;
        if(valcount_instance["gnosis"]["agg"].pending > 0) stateCountOverviewElm.innerHTML += `| Pending: ${valcount_instance["gnosis"]["agg"].pending} Gnosis Val`;
        if(valcount_instance["ethereum"]["agg"].pending > 0) stateCountOverviewElm.innerHTML += `| Pending: ${valcount_instance["ethereum"]["agg"].pending} Ethereum Val`;

        
        if(valcount_instance["gnosis"]["agg"].pubkeys > 0) GetValidatorsSnapshot("gnosis", "active_ongoing", OnSnapshotReceived);
        if(valcount_instance["ethereum"]["agg"].pubkeys > 0) GetValidatorsSnapshot("ethereum", "active_ongoing", OnSnapshotReceived);
    }

    function CalculateBalances(chain){
        if(!snapshots[chain]) return;

        let aggObj = {}; // destination:server

        const snapshotKeys = Object.keys(snapshots[chain]);
        for (const [instance_id, data] of Object.entries(valcount_instance[chain])) {
            if(instance_id === "agg") continue;

            if(!aggObj[data.destinationIndex]) aggObj[data.destinationIndex] = { agg: 0 };
            if(!aggObj[data.destinationIndex][data.serverIndex]) aggObj[data.destinationIndex][data.serverIndex] = 0;
            
            for(const snapshotKey of snapshotKeys){
                 // find val balance for each pubId in the instance list
                for (const pubId of data.pubIds){
                    const pubIdBalance = snapshots[chain][snapshotKey].data[Number(pubId)];
                    if(pubIdBalance) {
                        data.balance += pubIdBalance;
                        aggObj[data.destinationIndex].agg += pubIdBalance;
                        aggObj[data.destinationIndex][data.serverIndex] += pubIdBalance;
                        if(data.pubIds_filter[snapshotKey]) data.pubIds_filter[snapshotKey].push(pubId);
                    }
                }
            }
            valcount_instance[chain]["agg"].balance += valcount_instance[chain][instance_id].balance;
            
            // Update 
            RenderInstanceBalance(instance_id, data, chain);

            if(ramOptimized) delete data.pubIds;
		};

        RenderAccountCounts("balance", chain);

        try {
            const destinations = document.getElementsByClassName("servers-destination");
            const servers = document.getElementsByClassName("destination-server");  
            for (const [destinationIndex, data] of Object.entries(aggObj)) {
                RenderDestinationCounts(destinations[destinationIndex], Math.trunc(data.agg * 100) / 100, `balance_${chain}`);
                for (const [serverIndex, sdata] of Object.entries(data)) {
                    if(serverIndex === "agg") continue;
                    RenderServerCounts(servers[serverIndex], Math.trunc(sdata * 100) / 100, `balance_${chain}`);
                }
            }
        } catch(e){
            console.error(e);
        }
    }

    function RenderInstanceBalance(instanceId, instance_data, chain){
        const instanceElm = document.querySelector('[data-iid="'+instanceId+'"]');
        if(!instanceElm) return;
       
        if(instance_data.balance > 0){
            let ticker = (chain === "gnosis") ? "GNO" : "ETH";
            instanceElm.children[1].innerHTML = `${Math.trunc(instance_data.balance * 100) / 100} ${ticker} | `;
        }
    }

    function RenderInstanceCountsView(instanceId, instanceElm, instance_data, chain, initIteration = false){
        let statusElm = instanceElm.children[2];
        
        if(initIteration){
            const instanceTmpData = offlineStateData[instanceId];
            
            // first iteration
            if(!instanceTmpData){
                statusElm.innerHTML = "All online";
                statusElm.style.color = "green";
                return;
            } 
            
            statusElm.style.color = "orange";
            statusElm.innerHTML = "Val: "
            
            let onlineVal = instanceTmpData.v;
            let offlineIds = [];

            const offlineValCount = instanceTmpData.o.length;
            if(offlineValCount > 0){
                for(const obj of instanceTmpData.o){
                    if(offlineIds.length < 20) { // limit at 20
                        offlineIds.push(obj.i); 
                    } else {
                        break;
                    }
                }

                let msg = "";
                if(offlineIds.length > 0) {
                    let link = (chain === "gnosis") ? "https://gnosischa.in" : "https://beaconcha.in";
                    let stArr = offlineIds.toString();
                    msg += '<a href="'+link+'/dashboard?validators='+stArr+'" target="_blank" rel="nofollow noopener noreferrer" title="View first up to 20 offline ids" style="color:red">'+offlineValCount+' Offline</a> ';
                }

                onlineVal -= offlineValCount;

                statusElm.innerHTML += msg;
            }

            if(instanceTmpData.e) {
                statusElm.innerHTML += ` ${instanceTmpData.e} exited `;
                onlineVal -= instanceTmpData.e;
            }

            if(instanceTmpData.p) {
                statusElm.innerHTML += ` ${instanceTmpData.p} pending `;
                onlineVal -= instanceTmpData.p;
            }
            
            if(instanceTmpData.w) {
                statusElm.innerHTML += ` ${instanceTmpData.w} withdrawal `;
                onlineVal -= instanceTmpData.w;
            }
            
            statusElm.innerHTML += ` <span style="color:green">${onlineVal} online</span>`;
        }
        
        // 2nd iteration
        if(statusElm.innerHTML === "All online") {
            statusElm.innerHTML = `${instance_data.pubkeys} Val online`;
            return;
        } 
    }

    function RenderInsightLinks(pubkeyElm, chain, instanceId){
        const chunks = splitArrayIntoChunks(valcount_instance[chain][instanceId].pubIds, 20);
        let output = "Insight: ";
        const explorerUrl = (chain === "gnosis") ? "gnosischa.in" : "beaconcha.in";
         // link to explorer
        for(const index in chunks){
            const chunk = chunks[index];
            // add chain domain difference
            output += `<a href="https://${explorerUrl}/dashboard?validators=${chunk.toString()}" target="_blank" rel="nofollow noopener noreferrer">${(Number(index)+1)}</a> `;
        }
        pubkeyElm.innerHTML = output;

        function splitArrayIntoChunks(array, chunkSize) {
            let result = [];
            for (let i = 0; i < array.length; i += chunkSize) {
                let chunk = array.slice(i, i + chunkSize);
                result.push(chunk);
            }
            return result;
        }
    }

    function RenderServerCounts(serverElm, count, key){
        const srv_agg_ui = serverElm.getElementsByClassName("server_validators")[0];
        if(key === "validators"){
            srv_agg_ui.children[0].innerHTML = `${count.ethereum} Val`;
            srv_agg_ui.children[1].innerHTML = `${count.gnosis} Val`;
        } else {
            if(key === "balance_ethereum"){
                srv_agg_ui.children[0].innerHTML += ` / ${count} ETH`;
            } else if(key === "balance_gnosis"){
                srv_agg_ui.children[1].innerHTML += ` / ${count} GNO`;
            } else {
                console.warn("RenderDestinationCounts | unknown key", key);
            }
        }
    }

    function RenderDestinationCounts(serverDestinationElm, count, key){
        if(key === "validators"){
            const dest_val_agg_ui = serverDestinationElm.getElementsByClassName("dest_validators")[0];
            dest_val_agg_ui.children[0].innerHTML = count.ethereum;
            dest_val_agg_ui.children[1].innerHTML = count.gnosis;
        } else {
            const dest_val_agg_ui = serverDestinationElm.getElementsByClassName("dest_assets")[0];
            if(key === "balance_ethereum"){
                dest_val_agg_ui.children[0].innerHTML = count;
            } else if(key === "balance_gnosis"){
                dest_val_agg_ui.children[1].innerHTML = count;
            } else {
                console.warn("RenderDestinationCounts | unknown key", key);
            }
        }
    }

    function RenderAccountCounts(key, chain){
        if(chain === null){
            RenderAccountCounts(key, "gnosis");
            RenderAccountCounts(key, "ethereum");
            return;
        }

        const acc_agg_ui = document.getElementsByClassName("account_validators")[0];
        let elmIndex = null;
        let ticker = null;
        if(chain === "ethereum"){
            elmIndex = 0;
            ticker = " ETH";
        } else if(chain === "gnosis"){
            elmIndex = 1;
            ticker = " GNO";
        } else {
            console.warn("Unknown chain:", chain);
            return;
        }

        let value = valcount_instance[chain]["agg"][key];
        value = (key === "pubkeys") ? (value.toString() + " Val") : ((Math.trunc(value * 100) / 100).toString() + ticker);
        //console.log("RenderAccountCounts", key, chain, "→", value);
        acc_agg_ui.children[elmIndex].innerHTML = value;
    }
</script>
{{> scripts/security-guard}}
{{> footer_tailwind }}