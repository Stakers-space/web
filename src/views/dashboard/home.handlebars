<style>
.encrypted_value {
    word-wrap: break-word;
    overflow-wrap: break-word;
}
ul.img_marker li {
    max-height: 105px;
    overflow-y: clip;
}
</style>
{{> header_dashboard}}
<main class="mt-20">
    {{> sections/encryptionPassword }}
    <div class="grid">
        
        <div id="overview" class="egrid egrid-3">
            <div>
                <ul class="img_marker account_validators" style="display:ruby;">
                    <li style="--marker-image: url('/logo/ethereum.svg')" class="f-bold">??</li>
                    <li style="--marker-image: url('/logo/gnosis.svg');margin-left: 50px" class="f-bold"> ??</li>
                </ul>
            </div>
            <div>
                {{{offlineStateInfo}}}
            </div>
            <div>
                Data for epoch: 
                <ul style="display:inline-flex;list-style: none;gap:0.75rem;margin: 0;padding:0">
                    <li>E: <a href="https://beaconcha.in/epochs" target="_blank" rel="nofollow noopener noreferrer" {{#if lastEpocSyncState.ethereum}}{{else}}style="color:orange" title="Warning: Data are not up do date"{{/if}}>{{lastEpochReported.ethereum}}</a></li>
                    <li>G: <a href="https://gnosischa.in/epochs" target="_blank" rel="nofollow noopener noreferrer" {{#if lastEpocSyncState.gnosis}}{{else}}style="color:orange" title="Warning: Data are not up do date"{{/if}}>{{lastEpochReported.gnosis}}</a></li>
                </ul>
            </div>
        </div>
        
        {{#each servers}}
            <section class="egrid servers-destination">
                <div class="header">
                    <h2>{{this.location}}</h2>
                    <i class="encrypted_value">{{this.location_note}}</i>
                    <ul class="list-disc my-4">
                        <li>Network: <span class="encrypted_value">{{this.network}}</span></li>
                        <li>validators
                            <ul class="img_marker dest_validators">
                                <li style="--marker-image: url('/logo/ethereum.svg');">???</li>
                                <li style="--marker-image: url('/logo/gnosis.svg');">???</li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <div class="egrid egrid-2">
                    {{#each this.servers}}
                     <div class="destination-server">
                        <h3 id="{{this.name}}"><a href="/dashboard/server-node/define?id={{this.sid}}">{{this.name}}</a></h3>
                                <ul class="list-disc my-4">
                                    {{!<li>Validators: <strong></strong></li>}}
                                    <li>Clients: {{#each this.cliensList}}
                                        <code {{#if this.rcm}}style="color:orange" title="{{this.rcm}}"{{/if}}><a href="/{{this.client}}/update?sid={{../this.sid}}" target="_blank">{{this.client}}</a> ({{this.ver}})</code>
                                    {{/each}}
                                    {{!<li>SSD: </li>}}
                                    <li>{{#if this.brand_name}}Operated by {{#if this.brand_link}}<a href="{{this.brand_link}}" target="_blank">{{this.brand_name}}</a>{{else}}{{this.brand_name}}{{/if}}{{/if}} | Last Login <code style="color:{{this.login.color}}">{{this.login.time}}</code></li>
                                    <li>
                                        <ul class="img_marker server_validators" style="display:flex;">
                                            <li style="--marker-image: url('/logo/ethereum.svg');">???</li>
                                            <li style="--marker-image: url('/logo/gnosis.svg');margin-left: 50px;">???</li>
                                        </ul>
                                    </li>
                                </ul>
                                <h3>Validation instances | </h3>
                                <ul class="img_marker server_instances">
                                    {{#each this.instances}}
                                        <li data-iid="{{this.id}}" data-chain="{{this.chain}}" class="val_instance" style="--marker-image: url('/logo/{{#ifEqual this.chain "gnosis"}}gnosis{{else}}{{#ifEqual this.chain "ethereum"}}ethereum{{/ifEqual}}{{/ifEqual}}.svg');">
                                            {{#ifEqual isOwner "true"}}<a href="/dashboard/server-node/define-instance?sid={{../this.sid}}&iid={{this.id}}" class="iname">{{this.instance}}</a>{{else}}<span>{{this.instance}}</span>{{/ifEqual}} | 
                                            <span class="instance_balance"></span><span class="instance_status"></span><br>
                                            <i class="encrypted_value instance_note" style="max-width:90%;overflow:hidden;display:block">{{this.note}}</i>
                                            <i>
                                                {{#if this.fee_recipient}}Wlt: <a href="#" target="_blank" rel="nofollow noopener noreferrer" class="encrypted_value instance_fwlt">{{this.fee_recipient}}</a> | {{/if}}
                                                <span class="encrypted_value instance_insight">{{this.data}}</span>
                                            </i>
                                        </li>
                                    {{/each}}
                                </ul>
                                {{#ifEqual isOwner "true"}}<a href="/dashboard/server-node/define-instance?sid={{this.sid}}" class="btn btn-black btn-rounded">Add Instance</a>{{/ifEqual}}
                            </div>
                    {{/each}}
                </div>
            </section>
        {{/each}}
    </div>
    
    <section class="text-center mt-30 mb-80">
        <a href="/dashboard/server-node/define" class="btn btn-black btn-rounded">Define own server node</a>
        <a href="/dashboard/server-node/order" class="btn btn-black btn-rounded">Order server as a service</a>
        <a href="/dashboard/api" class="btn btn-black btn-rounded">API access</a>
        <a href="/dashboard/servers-resources" class="btn btn-black btn-rounded">Servers resources</a>
    </section>
    {{#if adminPanel}}{{{adminPanel}}}{{/if}}
</main>
{{> scripts/cryptography}}
{{> scripts/utils/xmlhttp}}
<script>
    /* In-page Offline / pending state data */
    var offlineStateData = {{{offlineStateData}}}; // offline data

    let snapshots = {};

    /* Aggregated view */
    function SectorState(isInstance = false){ 
        this.pubkeys = 0;
        this.balance = 0;
        if(isInstance) {
            this.pubIds = [];
        } else { // aggregation
            this.offline = 0;
            this.pending = 0;
            this.withdrawal = 0;
        }
    }
    let valcount_instance = { ethereum: {}, gnosis: {} };

    // Render Quick View
    (function () {
        const val_instances = document.getElementsByClassName("val_instance");
        for(var instanceElm of val_instances){
            const instanceId = instanceElm.dataset.iid;
            const chain = instanceElm.dataset.chain;

            if(!chain) {
                console.warn("No chain attached to instance id", instanceId);
                continue;
            }
            valcount_instance[chain][instanceId] = new SectorState(true);
            if(!valcount_instance[chain]["agg"]) valcount_instance[chain]["agg"] = new SectorState(false);

            if(offlineStateData[instanceId]){
                 // is defined = known issue on the instance
                const offlineCount = (offlineStateData[instanceId].o) ? offlineStateData[instanceId].o.length : 0;
                const pendingCount = (offlineStateData[instanceId].p) ? offlineStateData[instanceId].p : 0;
                const withdrawalCount = (offlineStateData[instanceId].w) ? offlineStateData[instanceId].w : 0;
               
                valcount_instance[chain]["agg"].offline += offlineCount;
                valcount_instance[chain]["agg"].pending += pendingCount;
                valcount_instance[chain]["agg"].withdrawal += withdrawalCount;
            }

            RenderInstanceCountsView(instanceId, instanceElm, valcount_instance[chain][instanceId], chain, true);
        }
    })();

    /** 
     *  Request validators data
    **/
    function GetValidatorsSnapshot(chain, state_snapshot){
        snapshots[chain] = {};
        snapshots[chain][state_snapshot] = {};
        xmlHttpRequest({type:"GET", url:`/api/state-balances?f=${chain}_${state_snapshot}.json`, credentials:false, data:null }, function(err,data){ return OnSnapshotReceived({chain, snapshot: state_snapshot}, err, data); });    
    }

    function OnSnapshotReceived(cred, err, data){
        //console.log("On Snapshot received", cred, err, data);
        snapshots[cred.chain][cred.snapshot] = JSON.parse(data);
        CalculateBalances(cred.chain);
    }

    /* callback from cryptography util */
    function OnDecryptionProcessComplted(){
        // parse pubkeys
        for(const serverDestination of document.getElementsByClassName("servers-destination")){
            //console.log("destination:", serverDestination);
            let dest_agg_validators = {gnosis:0,ethereum:0}
            for(const server of serverDestination.getElementsByClassName("destination-server")){
                let srv_agg_validators = {gnosis:0,ethereum:0} 
                for(const instanceElm of server.getElementsByClassName("val_instance")){
                    const instanceId = instanceElm.dataset.iid;
                    const chain = instanceElm.dataset.chain;
                    const statusElm = instanceElm.children[1];
                    
                    // update fee wlt
                    const feeWltC = instanceElm.getElementsByClassName("instance_fwlt");
                    if(feeWltC.length > 0){
                        const feeWlt = feeWltC[0];
                        // set ahref
                        const explorerurl = (chain === "gnosis") ? "https://gnosischa.in/address/" : "https://beaconcha.in/address/"
                        feeWlt.href = explorerurl+feeWlt.innerHTML;
                        feeWlt.innerHTML = "..."+feeWlt.innerHTML.slice(-3);
                    }

                    const pubkeyElm = instanceElm.getElementsByClassName("instance_insight")[0];

                    if(pubkeyElm.innerHTML === "") continue;
                    if(pubkeyElm.innerHTML.indexOf("Processing") > -1) continue;

                    const pubkeys = pubkeyElm.innerHTML.split(",");
                    
                    valcount_instance[chain][instanceId].pubIds = pubkeys;

                    const validators_count = pubkeys.length;
                    valcount_instance[chain][instanceId].pubkeys = validators_count; 
                    valcount_instance[chain]["agg"].pubkeys += validators_count;

                    RenderInstanceCountsView(instanceId, instanceElm, valcount_instance[chain][instanceId], chain, false);
                    //console.log("pubkeys:", validators_count);
                    srv_agg_validators[chain] += validators_count;
                    dest_agg_validators[chain] += validators_count;
                    
                    RenderInsightLinks(pubkeyElm, chain, instanceId);
                }

                RenderServerCounts(server, srv_agg_validators);
            }

            // dest level ui
            RenderDestinationCounts(serverDestination, dest_agg_validators);
        }

        // aggregation
        RenderAccountCounts("pubkeys", null);

        // UI level account (header)
        const stateCountOverviewElm = document.getElementById("overview").children[1];
        if(valcount_instance["gnosis"]["agg"].offline > 0) stateCountOverviewElm.innerHTML += `| <span style="color:red">Offline: ${valcount_instance["gnosis"]["agg"].offline} Gnosis Val</span> `;
        if(valcount_instance["ethereum"]["agg"].offline > 0) stateCountOverviewElm.innerHTML += `| <span style="color:red">Offline: ${valcount_instance["ethereum"]["agg"].offline} Ethereum Val</span> `;
        if(valcount_instance["gnosis"]["agg"].pending > 0) stateCountOverviewElm.innerHTML += `| Pending: ${valcount_instance["gnosis"]["agg"].pending} Gnosis Val`;
        if(valcount_instance["ethereum"]["agg"].pending > 0) stateCountOverviewElm.innerHTML += `| Pending: ${valcount_instance["ethereum"]["agg"].pending} Ethereum Val`;

        
        if(valcount_instance["gnosis"]["agg"].pubkeys > 0) GetValidatorsSnapshot("gnosis", "active_ongoing", OnSnapshotReceived);
        if(valcount_instance["ethereum"]["agg"].pubkeys > 0) GetValidatorsSnapshot("ethereum", "active_ongoing", OnSnapshotReceived);
    }

    function CalculateBalances(chain){
        if(!snapshots[chain]) return;

        const snapshotKeys = Object.keys(snapshots[chain]);
        for (const [instance_id, data] of Object.entries(valcount_instance[chain])) {
            if(instance_id === "agg") continue;
				
            for(const snapshotKey of snapshotKeys){
                 // find val balance for each pubId in the instance list
                for (const pubId of data.pubIds){
                    const pubIdBalance = snapshots[chain][snapshotKey].data[Number(pubId)];
                    if(pubIdBalance) data.balance += pubIdBalance; 
                }
            }
            valcount_instance[chain]["agg"].balance += valcount_instance[chain][instance_id].balance;
                
            // Update 
            RenderInstanceBalance(instance_id, data, chain);
		};

        RenderAccountCounts("balance", chain);
    }

    function RenderInstanceBalance(instanceId, instance_data, chain){
        const instanceElm = document.querySelector('[data-iid="'+instanceId+'"]');
        if(!instanceElm) return;
       
        if(instance_data.balance > 0){
            let ticker = (chain === "gnosis") ? "GNO" : "ETH";
            instanceElm.children[1].innerHTML = `${instance_data.balance} ${ticker} | `;
        }
    }

    function RenderInstanceCountsView(instanceId, instanceElm, instance_data, chain, initIteration = false){
        let statusElm = instanceElm.children[2];
        
        if(initIteration){
            const instanceTmpData = offlineStateData[instanceId];
            
            // first iteration
            if(!instanceTmpData){
                statusElm.innerHTML = "All online";
                statusElm.style.color = "green";
                return;
            } 
            
            statusElm.style.color = "orange";
            statusElm.innerHTML = "Val: "
            
            let onlineVal = instanceTmpData.v;
            let offlineIds = [];

            const offlineValCount = instanceTmpData.o.length;
            if(offlineValCount > 0){
                for(const obj of instanceTmpData.o){
                    if(offlineIds.length < 20) { // limit at 20
                        offlineIds.push(obj.i); 
                    } else {
                        break;
                    }
                }

                let msg = "";
                if(offlineIds.length > 0) {
                    let link = (chain === "gnosis") ? "https://gnosischa.in" : "https://beaconcha.in";
                    let stArr = offlineIds.toString();
                    msg += '<a href="'+link+'/dashboard?validators='+stArr+'" target="_blank" rel="nofollow noopener noreferrer" title="View first up to 20 offline ids" style="color:red">'+offlineValCount+' Offline</a> ';
                }

                onlineVal -= offlineValCount;

                statusElm.innerHTML += msg;
            }

            if(instanceTmpData.e) {
                statusElm.innerHTML += ` ${instanceTmpData.e} exited `;
                onlineVal -= instanceTmpData.e;
            }

            if(instanceTmpData.p) {
                statusElm.innerHTML += ` ${instanceTmpData.p} pending `;
                onlineVal -= instanceTmpData.p;
            }
            
            if(instanceTmpData.w) {
                statusElm.innerHTML += ` ${instanceTmpData.w} withdrawal `;
                onlineVal -= instanceTmpData.w;
            }
            
            statusElm.innerHTML += ` <span style="color:green">${onlineVal} online</span>`;
        }
        
        // 2nd iteration
        if(statusElm.innerHTML === "All online") {
            statusElm.innerHTML = `${instance_data.pubkeys} Val online`;
            return;
        } 
    }

    function RenderInsightLinks(pubkeyElm, chain, instanceId){
        const chunks = splitArrayIntoChunks(valcount_instance[chain][instanceId].pubIds, 20);
        let output = "Insight: ";
        const explorerUrl = (chain === "gnosis") ? "gnosischa.in" : "beaconcha.in";
         // link to explorer
        for(const index in chunks){
            const chunk = chunks[index];
            // add chain domain difference
            output += `<a href="https://${explorerUrl}/dashboard?validators=${chunk.toString()}" target="_blank" rel="nofollow noopener noreferrer">${(Number(index)+1)}</a> `;
        }
        pubkeyElm.innerHTML = output;

        function splitArrayIntoChunks(array, chunkSize) {
            let result = [];
            for (let i = 0; i < array.length; i += chunkSize) {
                let chunk = array.slice(i, i + chunkSize);
                result.push(chunk);
            }
            return result;
        }
    }

    function RenderServerCounts(serverElm, count){
        const srv_agg_ui = serverElm.getElementsByClassName("server_validators")[0];
        srv_agg_ui.children[0].innerHTML = count.ethereum;
        srv_agg_ui.children[1].innerHTML = count.gnosis;
    }

    function RenderDestinationCounts(serverDestinationElm, count){
        const dest_agg_ui = serverDestinationElm.getElementsByClassName("dest_validators")[0];
        dest_agg_ui.children[0].innerHTML = count.ethereum;
        dest_agg_ui.children[1].innerHTML = count.gnosis;
    }

    function RenderAccountCounts(key, chain){
        if(chain === null){
            RenderAccountCounts(key, "gnosis");
            RenderAccountCounts(key, "ethereum");
            return;
        }

        const acc_agg_ui = document.getElementsByClassName("account_validators")[0];
        if(chain === "ethereum"){
            acc_agg_ui.children[0].innerHTML =  `${valcount_instance["ethereum"]["agg"][key]} ${(key === "pubkeys") ? "Val" : "ETH"}`;
        } else if(chain === "gnosis"){
            acc_agg_ui.children[1].innerHTML = `${valcount_instance["gnosis"]["agg"][key]} ${(key === "pubkeys") ? "Val" : "GNO"}`;
        } else {
            console.warn("Unknown chain:", chain);
            return;
        }
    }

</script>
{{> scripts/security-guard}}
{{> footer}}