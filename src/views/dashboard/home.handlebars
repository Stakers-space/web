<style>
.encrypted_value {
    word-wrap: break-word;
    overflow-wrap: break-word;
}
ul.img_marker li {
    max-height: 75px;
    overflow-y: clip;
}
</style>
<body id="body">
{{> header_dashboard}}
<main class="mt-20">
    {{> sections/encryptionPassword }}
    <div class="grid">
        
        <div id="overview" class="egrid egrid-3">
            <div>Validators: 
                <ul class="img_marker account_validators" style="display:ruby;">
                    <li style="--marker-image: url('/logo/ethereum.svg')" class="f-bold">??? ETH / ?? Val</li>
                    <li style="--marker-image: url('/logo/gnosis.svg');margin-left: 50px" class="f-bold">??? GNO / ?? Val</li>
                </ul>
            </div>
            <div>
                {{{offlineStateInfo}}}
            </div>
            <div>
                Last Epoch reported: <a href="https://gnosischa.in/epochs" target="_blank" rel="nofollow noopener noreferrer" {{#if lastEpochNotSynced}}style="color:red" title="Warning: Data are not up do date"{{/if}}>{{lastEpochReported}}</a>
            </div>
        </div>
        
        {{#each servers}}
            <section class="egrid servers-destination">
                <div class="header">
                    <h2>{{this.location}}</h2>
                    <i class="encrypted_value">{{this.location_note}}</i>
                    <ul class="list-disc my-4">
                        <li>Network: <span class="encrypted_value">{{this.network}}</span></li>
                        <li>validators
                            <ul class="img_marker dest_validators">
                                <li style="--marker-image: url('/logo/ethereum.svg');">???</li>
                                <li style="--marker-image: url('/logo/gnosis.svg');">???</li>
                            </ul>
                        </li>
                    </ul>
                </div>
                <div class="egrid egrid-2">
                    {{#each this.servers}}
                     <div class="destination-server">
                        <h3 id="{{this.name}}"><a href="/dashboard/server-node/define?id={{this.sid}}">{{this.name}}</a></h3>
                                <ul class="list-disc my-4">
                                    {{!<li>Validators: <strong></strong></li>}}
                                    <li>Clients: {{#each this.cliensList}}
                                        <code {{#if this.rcm}}style="color:orange" title="{{this.rcm}}"{{/if}}><a href="/{{this.client}}/update?sid={{../this.sid}}" target="_blank">{{this.client}}</a> ({{this.ver}})</code>
                                    {{/each}}
                                    {{!<li>SSD: </li>}}
                                    <li>{{#if this.brand_name}}Operated by {{#if this.brand_link}}<a href="{{this.brand_link}}" target="_blank">{{this.brand_name}}</a>{{else}}{{this.brand_name}}{{/if}}{{/if}} | Last Login <code style="color:{{this.login.color}}">{{this.login.time}}</code></li>
                                    <li>
                                        <ul class="img_marker server_validators" style="display:flex;">
                                            <li style="--marker-image: url('/logo/ethereum.svg');">???</li>
                                            <li style="--marker-image: url('/logo/gnosis.svg');margin-left: 50px;">???</li>
                                        </ul>
                                    </li>
                                </ul>
                                <h3>Validation instances | </h3>
                                <ul class="img_marker server_instances">
                                    {{#each this.instances}}
                                        <li data-iid="{{this.id}}" data-chain="{{this.chain}}" class="val_instance" style="--marker-image: url('/logo/{{#ifEqual this.chain "gnosis"}}gnosis{{else}}{{#ifEqual this.chain "ethereum"}}ethereum{{/ifEqual}}{{/ifEqual}}.svg');">
                                            {{#ifEqual isOwner "true"}}<a href="/dashboard/server-node/define-instance?sid={{../this.sid}}&iid={{this.id}}" class="iname">{{this.instance}}</a>{{else}}<span>{{this.instance}}</span>{{/ifEqual}} | 
                                            <span class="instance_status"></span><br>
                                            <i class="encrypted_value instance_note" style="max-width:90%;overflow:hidden;display:block">{{this.note}}</i>
                                            <i>
                                                {{#if this.fee_recipient}}Wlt: <a href="#" target="_blank" rel="nofollow noopener noreferrer" class="encrypted_value instance_fwlt">{{this.fee_recipient}}</a> | {{/if}}
                                                <span class="encrypted_value instance_insight">{{this.data}}</span>
                                            </i>
                                        </li>
                                    {{/each}}
                                </ul>
                                {{#ifEqual isOwner "true"}}<a href="/dashboard/server-node/define-instance?sid={{this.sid}}" class="btn btn-black btn-rounded">Add Instance</a>{{/ifEqual}}
                            </div>
                    {{/each}}
                </div>
            </section>
        {{/each}}
    </div>
    
    <section class="text-center mt-30 mb-80">
        <a href="/dashboard/server-node/define" class="btn btn-black btn-rounded">Define own server node</a>
        <a href="/dashboard/server-node/order" class="btn btn-black btn-rounded">Order server as a service</a>
        <a href="/dashboard/api" class="btn btn-black btn-rounded">API access</a>
        <a href="/dashboard/servers-resources" class="btn btn-black btn-rounded">Servers resources</a>
    </section>
    {{#if adminPanel}}{{{adminPanel}}}{{/if}}
</main>
{{> scripts/cryptography}}
{{> scripts/utils/xmlhttp}}
<script>
    /* In-page Offline / pending state data */
    var offlineStateData = {{{offlineStateData}}}; // offline data
    let asyncTasks = 2;

    /* Aggregated view */
    function ValState(){ this.val_count = 0; this.asset_balance = 0; }
    function SectorState(pubIdsIncluded = false){ 
        this.offline = new ValState(); this.pending = new ValState(); this.online = new ValState()
        if(pubIdsIncluded) this.pubIds = [];
    }
    let valcount_instance = { ethereum: {}, gnosis: {} };

    (function () {
        const val_instances = document.getElementsByClassName("val_instance");
        for(var instanceElm of val_instances){
            const instanceId = instanceElm.dataset.iid;
            const chain = instanceElm.dataset.chain;

            if(!chain) {
                console.warn("No chain attached to instance id", instanceId);
                continue;
            }
            valcount_instance[chain][instanceId] = new SectorState(true);
            if(!valcount_instance[chain]["agg"]) valcount_instance[chain]["agg"] = new SectorState(false);

            if(offlineStateData[instanceId]){
                 // is defined = known issue on the instance
                const offlineCount = (offlineStateData[instanceId].o) ? offlineStateData[instanceId].o.length : 0;
                const pendingCount = (offlineStateData[instanceId].p) ? offlineStateData[instanceId].p : 0;
               
                valcount_instance[chain][instanceId].offile.val_count = offlineCount;
                valcount_instance[chain]["agg"].offline.val_count += offlineCount;
                
                valcount_instance[chain][instanceId].pending.val_count = pendingCount;
                valcount_instance[chain]["agg"].pending.val_count += pendingCount;
            }

           RenderQuickView(instanceId, instanceElm, valcount_instance[chain][instanceId], chain);
        }
    })();

    /** 
     *  Request validators data
    **/
    function GetValidatorsSnapshot(chain, state_snapshot){
        xmlHttpRequest({type:"GET", url:`/api/state-balances?f=${chain}_${state_snapshot}.json`, credentials:false, data:null }, function(err,data){ return OnSnapshotReceived({chain, snapshot: state_snapshot}, "err:", err); });    
    }

    function OnSnapshotReceived(cred, err, data){
        console.log("OnSnapshotReceived", cred, err, data);
        CalculateState();
    }

    // if gnosis validators
    GetValidatorsSnapshot("gnosis", "active_ongoing", OnSnapshotReceived);
    // if ethereum validators
        // get ethereum snapshot

    /* callback from cryptography util */
    function OnDecryptionProcessComplted(){
        let acc_agg_validators = { gnosis:0, ethereum:0 }
        // parse pubkeys
        for(const serverDestination of document.getElementsByClassName("servers-destination")){
            //console.log("destination:", serverDestination);
            let dest_agg_validators = {gnosis:0,ethereum:0}
            for(const server of serverDestination.getElementsByClassName("destination-server")){
                let srv_agg_validators = {gnosis:0,ethereum:0} 
                for(const instanceElm of server.getElementsByClassName("val_instance")){
                    const instanceId = instanceElm.dataset.iid;
                    const statusElm = instanceElm.children[1];

                    // update fee wlt
                    const feeWltC = instanceElm.getElementsByClassName("instance_fwlt");
                    if(feeWltC.length > 0){
                        const feeWlt = feeWltC[0];
                        // set ahref
                        const explorerurl = (instanceElm.dataset.chain === "gnosis") ? "https://gnosischa.in/address/" : "https://beaconcha.in/address/"
                        feeWlt.href = explorerurl+feeWlt.innerHTML;
                        feeWlt.innerHTML = "..."+feeWlt.innerHTML.slice(-3);
                    }

                    const pubkeyElm = instanceElm.getElementsByClassName("instance_insight")[0]; //instanceElm.children[4];

                    if(pubkeyElm.innerHTML === "") continue;
                    if(pubkeyElm.innerHTML.indexOf("Processing") > -1) continue;
                    const pubkeys = pubkeyElm.innerHTML.split(",");
                    
                    valcount_instance[instanceElm.dataset.chain][instanceId].pubIds = pubkeys;

                    // Render
                    const validators_count = pubkeys.length;
                    if(statusElm.innerHTML === "All online") statusElm.innerHTML = `${validators_count}/${validators_count} Val online`;
                    //console.log("pubkeys:", validators_count);
                    srv_agg_validators[instanceElm.dataset.chain] += validators_count;
                    dest_agg_validators[instanceElm.dataset.chain] += validators_count;
                    acc_agg_validators[instanceElm.dataset.chain] += validators_count;
                    
                        
                    const chunks = splitArrayIntoChunks(pubkeys, 100);
                    let output = "Insight: ";
                    for(const index in chunks){
                        const chunk = chunks[index];
                        output += `<a href="https://gnosischa.in/dashboard?validators=${chunk.toString()}" target="_blank" rel="nofollow noopener noreferrer">${(Number(index)+1)}</a> `;
                    }
                    pubkeyElm.innerHTML = output;
                }

                const srv_agg_ui = server.getElementsByClassName("server_validators")[0];
                srv_agg_ui.children[0].innerHTML = srv_agg_validators.ethereum;
                srv_agg_ui.children[1].innerHTML = srv_agg_validators.gnosis;
            }

            // dest level ui
            const dest_agg_ui = serverDestination.getElementsByClassName("dest_validators")[0];
            dest_agg_ui.children[0].innerHTML = dest_agg_validators.ethereum;
            dest_agg_ui.children[1].innerHTML = dest_agg_validators.gnosis;
        }

        // aggregation
        const acc_agg_ui = document.getElementsByClassName("account_validators")[0];
        acc_agg_ui.children[0].innerHTML = acc_agg_validators.ethereum;
        acc_agg_ui.children[1].innerHTML = acc_agg_validators.gnosis;

        // UI level account (header)
        if(valcount_instance["gnosis"]["agg"].offline.val_count > 0) document.getElementById("overview").children[1].innerHTML += `| <span style="color:red">Offline: ${valcount_instance["gnosis"]["agg"].offline.val_count} GNO Val</span> `;
        if(valcount_instance["ethereum"]["agg"].offline.val_count > 0) document.getElementById("overview").children[1].innerHTML += `| <span style="color:red">Offline: ${valcount_instance["ethereum"]["agg"].offline.val_count} ETH Val</span> `;
        if(valcount_instance["gnosis"]["agg"].pending.val_count > 0) document.getElementById("overview").children[1].innerHTML += `| Pending: ${valcount_instance["gnosis"]["agg"].pending.val_count} GNO Val`;
        if(valcount_instance["ethereum"]["agg"].pending.val_count > 0) document.getElementById("overview").children[1].innerHTML += `| Pending: ${valcount_instance["ethereum"]["agg"].pending.val_count} ETH Val`;

        function splitArrayIntoChunks(array, chunkSize) {
            let result = [];
            for (let i = 0; i < array.length; i += chunkSize) {
                let chunk = array.slice(i, i + chunkSize);
                result.push(chunk);
            }
            return result;
        }

        CalculateState();
    }

    function CalculateState(){
        asyncTasks--;
        if(asyncTasks > 0) return;

        // Calculating
    }

    function RenderQuickView(instanceId, instanceElm, instance_data, chain){
        let statusElm = instanceElm.children[1];
        if(instance_data.offline.val_count === 0 && instance_data.pending.val_count === 0){
            statusElm.innerHTML = "All online";
            statusElm.style.color = "green";
            return;
        }

        let offlineIds = [];
        for(const obj of offlineStateData[instanceId].o){
            if(offlineIds.length < 100) { // limit at 100
                offlineIds.push(obj.i); 
            } else {
                break;
            }
        }

        let msg = "";
        if(offlineIds.length > 0) {
            let link = (chain === "gnosis") ? "https://gnosischa.in" : "https://beaconcha.in";
            let stArr = offlineIds.toString();
            msg += '<a href="'+link+'/dashboard?validators='+stArr+'" target="_blank" rel="nofollow noopener noreferrer" title="View first up to 100 offline ids" style="color:red">'+instance_data.offline.val_count+' Offline</a> ';
        }
        if(pendingCount > 0) msg += pendingCount+' Pending ';
        msg += "| " + offlineStateData[instanceId].v + "Total";

        statusElm.innerHTML = msg;
        statusElm.style.color = "orange";
    }

</script>
{{> scripts/security-guard}}
{{> footer}}
</body>