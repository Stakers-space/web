{{> header_dashboard}}
<main class="mx-auto max-w-[1600px] px-5 md:px-10">
    {{#if failureCallback}}
        <p class="my-4 text-red-600">{{{failureCallback}}}</p>
    {{/if}}

    {{> sections/encryptionPassword }}

    {{#if isOwner}}
    <div class="grid gap-8 md:grid-cols-2 mt-10">
        <section class="mt-4 rounded-2xl border bg-neutral-50 p-5 md:p-6">
            <h1 class="mb-4 text-2xl font-semibold">{{formTitle}}</h1>
            <form method="post" action="{{submitLink}}" id="serverDefinition" class="space-y-6">
                <ul class="list-disc space-y-4 pl-5">
                    <li class="inline-flex w-full">
                        <label for="server-name" class="block text-sm font-medium">Server name</label>
                        <input type="text" id="server-name" name="server-name" required="required" value="{{server.serverName}}" class="w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                    </li>
                    {{#if editingView}}
                    <li class="inline-flex w-full">
                        <label for="server-location" class="text-sm font-medium pr-2">Server Location (Optional)</label>
                        <input type="text" id="server-location" name="server-location" value="{{server.serverLocation}}" class="w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30"><br>
                        <label for="server-location" class="text-sm font-medium ml-5 pr-2">Server Location Note (Optional, Encrypted)</label>
                        <input type="text" id="server-location" name="server-location-note" class="encrypted_value w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30" value="{{server.serverLocation_note}}">
                    </li>
                    <li class="inline-flex w-full">
                        <label for="server-network" class="block text-sm font-medium">Server Network (Optional, encrypted).</label>
                        <input type="text" id="server-network" name="server-network" class="encrypted_value w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30" value="{{server.serverNetwork}}">
                    </li>
                    <li class="inline-flex w-full">
                        <label for="server-cpu" class="block text-sm font-medium">Server CPU Type</label>
                        <select id="server-cpu" name="server-cpu" class="w-full rounded-lg border bg-white px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                            <option value="amd" selected>Amd</option>
                        </select>
                    </li>
                    <li class="inline-flex w-full">
                        <label for="server-user" class="block text-sm font-medium">Server User (Optional, encrypted)</label>
                        <input type="text" id="server-user" name="server-user" value="{{server.serverUser}}" class="encrypted_value w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                    </li>
                    <li class="inline-flex w-full">
                        <label for="ssh-port" class="block text-sm font-medium">SSH Port (Optional, encrypted)</label>
                        <input type="text" id="ssh-port" name="ssh-port" value="{{server.sshPort}}" class="encrypted_value w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                    </li>
                    <li class="inline-flex w-full">
                        <label for="operation-start" class="block text-sm font-medium">Operation Start:</label>
                        <input type="date" name="operation-start" id="operation-start" value="{{server.operationStart}}" class="w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                    </li>
                    <li class="inline-flex w-full">
                        <label for="vpn-id" class="block text-sm font-medium pr-2">VPN ID.</label>
                        <input type="text" id="vpn-id" name="vpn-id" value="{{server.vpnId}}" class="w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                        <label for="vpn-expiration" class="block text-sm font-medium ml-5 pr-2">Expiration:</label>
                        <input type="date" name="vpn-expiration" id="vpn-expiration" value="{{server.vpnExpiration}}" class="w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                    </li>
                    {{/if}}
                </ul>
                {{#if editingView}}
                <div class="space-y-6 mt-15">
                    <h4 class="text-lg font-semibold">Staking clients selection</h4>
                    <ul class="list-disc space-y-6 pl-5">
                        <li>
                            <div class="mb-2 font-medium">Execution client(s)</div>
                            <ol class="list-decimal space-y-3 pl-6">
                                {{#each server.execution}}
                                <li><label for="ec_1" class="text-sm">Execution Client</label>
                                    <select id="ec_1" name="ec_1" onchange="OnClientChanged('ec_1')" class="rounded-lg border bg-white px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                                        <option value="nethermind" {{#ifEqual this.client "nethermind"}}selected{{/ifEqual}}>Nethermind</option>
                                        <option value="erigon"{{#ifEqual this.client "erigon"}}selected{{/ifEqual}}>Erigon</option>
                                        <option value="geth" {{#ifEqual this.client "geth"}}selected{{/ifEqual}} class="{{#ifEqual ../server.chains.ethereum "true"}}{{else}}hidden{{/ifEqual}} ethereum-chain">Geth (Ethereum only)</option>
                                    </select>
                                    {{#if ../editingView}}<label for="ec_1_ver" class="ml-3 text-sm">Version </label> <input type="text" id="ec_1_ver" name="ec_1_ver" placeholder="1.25" value="{{this.ver}}" class="w-[70px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">{{/if}}
                                </li>
                                {{/each}}
                            </ol>
                            <p  class="mt-2 text-sm italic text-neutral-900">* Support for defining more consensus clients will be added later</p>
                        </li>
                        <li><div class="mb-2 font-medium">Consensus client(s)</div>
                            <ol class="list-decimal space-y-3 pl-6">
                                {{#each server.consensus}}
                                <li class="flex flex-wrap items-center gap-2">
                                    <label for="cc_1" class="text-sm">Consensus Client</label>
                                    <select id="cc_1" name="cc_1" onchange="OnClientChanged('cc_1')" class="rounded-lg border bg-white px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                                        <option value="lighthouse" {{#ifEqual this.client "lighthouse"}}selected{{/ifEqual}}>Lighthouse</option>
                                        <option value="lodestar" {{#ifEqual this.client "lodestar"}}selected{{/ifEqual}}>Lodestar</option>
                                        <option value="teku" {{#ifEqual this.client "teku"}}selected{{/ifEqual}}>Teku</option>
                                        <option value="prysm" {{#ifEqual this.client "prysm"}}selected{{/ifEqual}} class="{{#ifEqual ../server.chains.ethereum "true"}}{{else}}hidden{{/ifEqual}} ethereum-chain">Prysm (Ethereum only)</option>
                                    </select>
                                    <label for="cc_1_ver" class="ml-3 text-sm">Version</label> <input type="text" id="cc_1_ver" name="cc_1_ver" placeholder="{{this.ver}}" value="{{this.ver}}" class="w-[80px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                                </li>
                                {{/each}}
                            </ol>
                            <p class="mt-2 text-sm italic text-neutral-900">* Support for defining more consensus clients will be added later</p>
                        </li>
                        <li>
                            <h4 class="mb-2 text-lg font-semibold">Client-based technologies</h4>
                            <div class="client-oriented" data-client="lighthouse">
                                <p class="text-sm text-neutral-900">No technology required</p>
                            </div>
                            <div class="client-oriented mt-2 space-y-2 hidden" data-client="lodestar">
                                <label for="nodejs_ver" class="text-sm font-medium pr-2">NodeJs ver</label>
                                <input type="text" id="nodejs_ver" name="nodejs_ver" value="{{../server.nodejs_ver}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                            </div>
                            <div class="client-oriented mt-2 space-y-2 hidden" data-client="teku">
                                <label for="jdk_ver" class="text-sm font-medium pr-2">jdk ver</label>
                                <input type="number" id="jdk_ver" name="jdk_ver" value="{{../server.jdk_ver}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                            </div>
                        </li>
                        <li>
                            <h4 class="mb-3 text-lg font-semibold">Chains configuration</h4>
                            <div class="tabselector bg-gray-200 p-5 pt-5 rounded-xl shadow-md">
                                <nav class="mb-5 grid gap-2 md:grid-cols-2">
                                    <button class="w-full tab selected px-3 py-2 text-xl" data-tabpanel="1" type="button">Ethereum chain</button>
                                    <button class="w-full tab px-3 py-2 text-xl" data-tabpanel="2" type="button">Gnosis chain</button>
                                </nav>
                                <div class="tabpanel selected mt-4 space-y-4">
                                    <label class="inline-flex items-center gap-2">
                                        <input {{#if server.chains.ethereum}}checked{{/if}} type="checkbox" name="ethereum" value="ethereum" onclick="toggleSelect('ethereum-chain')" class="checkbox-required" data-checkbox="chain"> Active
                                    </label>
                                    {{#each server.execution}}
                                    {{!--#each this.ports--}}
                                    <div class="{{#ifEqual ../server.chains.ethereum "true"}}{{else}}hidden{{/ifEqual}} ethereum-chain space-y-2">
                                        <h4 class="font-semibold">Execution client service (Ethereum)</h4>
                                        <div class="flex items-center gap-3">
                                            <label for="ethereum_ec_1_sn" class="block text-sm font-medium shrink-0">Execution client Service name for Ethereum</label>
                                            <input type="text" id="ethereum_ec_1_sn" name="ethereum_ec_1_sn" value="{{../server.portsByChain.execution.ethereum.0.service_name}}" class="flex-1 min-w-0 rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30"><br>
                                        </div>
                                        <div class="flex items-center gap-3">
                                            <label for="ethereum_cc_1_sn" class="block text-sm font-medium shrink-0">Execution client Data for Ethereum</label>
                                            <input type="text" id="ethereum_ec_1_sdp" name="ethereum_ec_1_sdp" value="{{../server.portsByChain.execution.ethereum.0.data_path}}" class="flex-1 min-w-0 rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                                        </div>
                                        
                                        <h5 class="pt-2 font-medium">Ports for Ethereum chain</h5>
                                        <label for="ethereum_ec_1_p" class="mr-2 text-sm">Main port</label>
                                        <input type="number" id="ethereum_ec_1_p" name="ethereum_ec_1_p" value="{{../server.portsByChain.execution.ethereum.0.port}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"> (Default: <code>8545</code>)<br>
                                        <label for="ethereum_ec_1_p_c" class="mr-2 text-sm">P2P port</label>
                                        <input type="number" id="ethereum_ec_1_p_c" name="ethereum_ec_1_p_c" value="{{../server.portsByChain.execution.ethereum.0.p2p_port}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"> (Default: <code>30303</code>)<br>
                                        <label for="ethereum_ec_1_p_r" class="mr-2 text-sm">RCP port</label>
                                        <input type="number" id="ethereum_ec_1_p_r" name="ethereum_ec_1_p_r" value="{{../server.portsByChain.execution.ethereum.0.port_2}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"> (Default: <code>8551</code>)
                                    </div>
                                    {{!--/each--}}
                                    {{/each}}
                                    {{#each server.consensus}}
                                    {{!--#each this.ports--}}
                                    <div class="{{#ifEqual ../server.chains.ethereum "true"}}{{else}}hidden{{/ifEqual}} ethereum-chain space-y-2">
                                        <h4 class="font-semibold">Consensus client service (Ethereum)</h4>
                                        <div class="flex items-center gap-3">
                                            <label for="ethereum_cc_1_sn" class="text-sm font-medium shrink-0">Consensus client Service name for Ethereum</label>
                                            <input type="text" id="ethereum_cc_1_sn" name="ethereum_cc_1_sn" value="{{../server.portsByChain.consensus.ethereum.0.service_name}}" class="flex-1 min-w-0 rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30"><br>
                                        </div>
                                        <div class="flex items-center gap-3">
                                            <label for="ethereum_cc_1_sn" class="text-sm font-medium shrink-0">Consensus client Data for Ethereum</label>
                                            <input type="text" id="ethereum_cc_1_sdp" name="ethereum_cc_1_sdp" value="{{../server.portsByChain.consensus.ethereum.0.data_path}}" class="flex-1 min-w-0 rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                                        </div>
                                        
                                        <h5 class="pt-2 font-medium">Ports for Ethereum chain</h5>
                                        <label for="ethereum_cc_1_p" class="mr-2 text-sm">Main port</label>
                                        <input type="number" id="ethereum_cc_1_p" name="ethereum_cc_1_p" value="{{../server.portsByChain.consensus.ethereum.0.port}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"><br>
                                        <label for="ethereum_cc_1_p_c" class="mr-2 text-sm">P2P port</label>
                                        <input type="number" id="ethereum_cc_1_p_c" name="ethereum_cc_1_p_c" value="{{../server.portsByChain.consensus.ethereum.0.p2p_port}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"><br>
                                        <label for="ethereum_cc_1_p_q" class="mr-2 text-sm">Quic port</label>
                                        <input type="number" id="ethereum_cc_1_p_q" name="ethereum_cc_1_p_q" value="{{../server.portsByChain.consensus.ethereum.0.port_2}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                                    </div>
                                    {{!--/each--}}
                                    {{/each}}
                                </div>
                                <div class="tabpanel mt-4 space-y-4">
                                    <label class="inline-flex items-center gap-2">
                                        <input {{#if server.chains.gnosis}}checked{{/if}} type="checkbox" name="gnosis" value="gnosis" onclick="toggleSelect('gnosis-chain')" class="checkbox-required" data-checkbox="chain"> Active
                                    </label>
                                    {{#each server.execution}}
                                    {{!--#each this.ports--}}
                                    <div class="{{#ifEqual ../server.chains.gnosis "true"}}{{else}}hidden{{/ifEqual}} gnosis-chain space-y-2">
                                        <h4 class="font-semibold">Execution client service (Gnosis)</h4>
                                        <div class="flex items-center gap-3">
                                            <label for="gnosis_ec_1_sn" class="text-sm font-medium shrink-0">Execution client Service name for Gnosis</label>
                                            <input type="text" id="gnosis_ec_1_sn" name="gnosis_ec_1_sn" value="{{../server.portsByChain.execution.gnosis.0.service_name}}" class="flex-1 min-w-0 rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30"><br>
                                        </div>
                                        <div class="flex items-center gap-3">
                                            <label for="gnosis_cc_1_sn" class="text-sm font-medium shrink-0">Execution client Data for Gnosis</label>
                                            <input type="text" id="gnosis_ec_1_sdp" name="gnosis_ec_1_sdp" value="{{../server.portsByChain.execution.gnosis.0.data_path}}" class="flex-1 min-w-0 rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                                        </div>

                                        <h5 class="pt-2 font-medium">Ports for Gnosis chain</h5>
                                        <label for="gnosis_ec_1_p" class="mr-2 text-sm">Main port</label>
                                        <input type="number" id="gnosis_ec_1_p" name="gnosis_ec_1_p" value="{{../server.portsByChain.execution.gnosis.0.port}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"> (Default: <code>8545</code>)<br>
                                        <label for="ec_1_p_c" class="mr-2 text-sm">P2P port</label>
                                        <input type="number" id="gnosis_ec_1_p_c" name="gnosis_ec_1_p_c" value="{{../server.portsByChain.execution.gnosis.0.p2p_port}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"> (Default: <code>30303</code>)<br>
                                        <label for="gnosis_ec_1_p_r" class="mr-2 text-sm">RCP port</label>
                                        <input type="number" id="gnosis_ec_1_p_r" name="gnosis_ec_1_p_r" value="{{../server.portsByChain.execution.gnosis.0.port_2}}" class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"> (Default: <code>8551</code>)
                                    </div>
                                    {{!--/each--}}
                                    {{/each}}
                                    {{#each server.consensus}}
                                    <div class="{{#ifEqual ../server.chains.gnosis "true"}}{{else}}hidden{{/ifEqual}} gnosis-chain space-y-2">
                                        <h4 class="font-semibold">Consensus client service (Gnosis)</h4>
                                        <div class="flex items-center gap-3">
                                            <label for="gnosis_cc_1_sn" class="text-sm font-medium shrink-0">Consensus client Service name for Gnosis</label>
                                            <input type="text" id="gnosis_cc_1_sn" name="gnosis_cc_1_sn" value="{{../server.portsByChain.consensus.gnosis.0.service_name}}" class="flex-1 min-w-0 rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30"><br>
                                        </div>
                                        <div class="flex items-center gap-3">
                                            <label for="gnosis_cc_1_sn" class="text-sm font-medium shrink-0">Consensus client Data for Gnosis</label>
                                            <input type="text" id="gnosis_cc_1_sdp" name="gnosis_cc_1_sdp" value="{{../server.portsByChain.consensus.gnosis.0.data_path}}" class="flex-1 min-w-0 rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                                        </div>
                                        
                                        <h5 class="pt-2 font-medium">Ports for Gnosis chain</h5>
                                        <label for="gnosis_cc_1_p" class="mr-2 text-sm">Main port</label>
                                        <input type="number" id="gnosis_cc_1_p" name="gnosis_cc_1_p" value="{{../server.portsByChain.consensus.gnosis.0.port}}"class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"><br>
                                        <label for="gnosis_cc_1_p_c" class="mr-2 text-sm">P2P port</label>
                                        <input type="number" id="gnosis_cc_1_p_c" name="gnosis_cc_1_p_c" value="{{../server.portsByChain.consensus.gnosis.0.p2p_port}}"class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30"><br>
                                        <label for="gnosis_cc_1_p_q" class="mr-2 text-sm">Quic port</label>
                                        <input type="number" id="gnosis_cc_1_p_q" name="gnosis_cc_1_p_q" value="{{../server.portsByChain.consensus.gnosis.0.port_2}}"class="w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                                    </div>
                                    {{/each}}
                                </div>
                            </div>
                            <p class="mt-4 text-sm">Check port availability: <code>sudo ss -tulpn | grep ':PORT'</code></p>
                        </li>
                        <li>
                            <h4 class="mb-2 text-lg font-semibold">Service-based clients</h4>
                            <ul  class="list-disc space-y-3 pl-5">
                                <li class="{{#ifEqual server.chains.ethereum "true"}}{{else}}hidden{{/ifEqual}} ethereum-chain space-y-2">
                                    <label for="mb_1" class="text-sm">MEV Client</label>
                                    <select id="mb_1" name="mb_1" class="rounded-lg border bg-white px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                                        <option value="mevboost" selected>MEV-Boost (Ethereum only)</option>
                                    </select>
                                    <label for="mb_1_ver" class="ml-2 text-sm">Ver </label><input type="text" id="mb_1_ver" name="mb_1_ver" placeholder="{{server.mev.0.ver}}" value="{{server.mev.0.ver}}" class="w-[80px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                                </li>
                                <li class="{{#ifEqual server.chains.ethereum "true"}}{{else}}hidden{{/ifEqual}} ethereum-chain space-y-2">
                                    <label class="text-sm">Rocketpool</label>: <input type="text" name="sc_rocketpool_ver" placeholder="" value="{{server.service_obj.rocketpool.ver}}" class="ml-1 w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                                </li>
                                <li>
                                    <label class="text-sm">Stakewise</label>: <input type="text" name="sc_stakewise_ver" placeholder="" value="{{server.service_obj.stakewise.ver}}" class="ml-1 w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                                </li>
                                <li class="{{#ifEqual server.chains.ethereum "true"}}{{else}}hidden{{/ifEqual}} ethereum-chain space-y-2">
                                    <label class="text-sm">Lido</label>: <input type="text" name="sc_lido_ver" value="{{server.service_obj.lido.ver}}" class="ml-1 w-[120px] rounded-lg border px-2 py-1 text-sm outline-none focus:ring-2 focus:ring-black/30">
                                </li>
                            </ul>
                        </li>
                    </ul>
                </div>
                {{/if}} {{! Editing view end}}

                <div class="mt-10 text-center space-y-3">
                    {{#if editingView}}
                    
                        <label class="text-sm font-medium">Encryption password</label>
                        <input type="text" placeholder="Encryption password" id="encryption_psw_metadata" class="encryption-password w-full max-w-xs rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">
                    
                    <input type="submit" class="submit inline-flex items-center rounded-lg bg-black px-5 py-2 mt-5 text-white hover:opacity-90 cursor-pointer" id="submit-server" value="{{formSubmit}}">
                    {{/if}}
                </div>
            </form>

            <script>
                /* Activate Ethereum / Gnosis options */
                function toggleSelect(selectId) {
                    console.log("toggleSelect", selectId);
                    var elms = document.getElementsByClassName(selectId);
                    for(var elm of elms){
                        console.log("toggleSelect elements:", elm);
                        elm.classList.toggle("hidden");
                    }
                }
                const clientsDB = {{{clients}}};
                function OnClientChanged(elmId){
                    let clientSelected = document.getElementById(elmId).value;
                    let ethClientElm = document.getElementById("ethereum_"+elmId+"_sn");
                    let gnoCLientElm = document.getElementById("gnosis_"+elmId+"_sn");
                    // before selected client change
                    for(const elm of document.getElementsByClassName("client-oriented")){
                        console.log(elm, elm.dataset.client, clientSelected);
                        if(elm.dataset.client === clientSelected) {
                            elm.classList.remove("hidden");
                        } else if(!elm.classList.contains("hidden")){
                            elm.classList.add("hidden");
                        }
                    }

                    try {
                        let verElement = null;
                        let placeholder = "";
                        let api_port = null;
                        // change version placehodler
                        switch(clientSelected){
                            case "nethermind":
                                verElement = "ec_1_ver";
                                placeholder = clientsDB.executionLayer.nethermind.latestVerClean;
                            break;
                            case "erigon":
                                verElement = "ec_1_ver";
                                placeholder = clientsDB.executionLayer.erigon.latestVer;
                            break;
                            case "geth":
                                verElement = "ec_1_ver";
                                placeholder = clientsDB.executionLayer.geth.latestVer;
                            break;
                            case "lighthouse":
                                verElement = "cc_1_ver";
                                placeholder = clientsDB.consensusLayer.lighthouse.latestVer;
                                api_port = 5052;
                            break;
                            case "lodestar":
                                verElement = "cc_1_ver";
                                placeholder = clientsDB.consensusLayer.lodestar.latestVer;
                                api_port = 9596;
                            break;
                            case "teku":
                                verElement = "cc_1_ver";
                                placeholder = clientsDB.consensusLayer.teku.latestVer;
                                api_port = 5051;
                            break;
                            case "prysm":
                                verElement = "cc_1_ver";
                                placeholder = clientsDB.consensusLayer.prysm.latestVer;
                                api_port = 3500;
                            break;
                            case "mevboost":
                                verElement = "mb_1_ver";
                                placeholder = clientsDB.mevLayer.mevboost.latestVer;
                            break;
                        }
                        document.getElementById(verElement).placeholder = placeholder;
                        
                    } catch(e) {
                        console.log(e);
                    }
                    
                    if(elmId === "cc_1") clientSelected += "beacon";
                    console.log("MS | OnClientChanged", elmId, clientSelected);
                    if(ethClientElm.value === "") ethClientElm.value = "eth-"+clientSelected;
                    if(gnoCLientElm.value === "") gnoCLientElm.value = "gno-"+clientSelected;
                    let ethClientPathElm = document.getElementById("ethereum_"+elmId+"_sdp");
                    let gnoCLientPathElm = document.getElementById("gnosis_"+elmId+"_sdp");
                    console.log(ethClientPathElm.value, gnoCLientPathElm.value);
                    if(ethClientPathElm.value === "") ethClientPathElm.value = "/var/lib/ethereum/"+clientSelected;
                    if(gnoCLientPathElm.value === "") gnoCLientPathElm.value = "/var/lib/gnosis/"+clientSelected;
                }
                OnClientChanged("ec_1");
                OnClientChanged("cc_1");

                function EditServerLoad(){
                    let scheduledEncryptions = 0;
                    let editServerForm = document.getElementById('serverDefinition');
                    editServerForm.addEventListener('submit', function (event) {
                        // prevent sending form
                        event.preventDefault();
                        let cryptPsw = document.getElementById('encryption_psw_metadata').value;
                        let formData = new FormData(editServerForm);
                        let encryptedElements = document.getElementsByClassName("encrypted_value");
                        const encryptedElementsL = encryptedElements.length;
                        scheduledEncryptions = encryptedElementsL;
                        for(var i=0;i<encryptedElementsL;i++){
                            var elm = encryptedElements[i];
                            //const value = GetElementValue(elm);
                            const submitData = formData.get(elm.name);
                            // if already encryted (it was not decrypted, skip)
                            console.log("Encrypting content", submitData);
                            EncryptContent(cryptPsw, submitData, elm)
                            .then(encryptedContent => {
                                console.log("Encrypted Note:", encryptedContent, encryptedContent.length);
                                formData.set(elm.name, encryptedContent);
                                OnEncryptionCompleted();
                            })
                            .catch(error => {
                                console.error("Encryption failed:", error);
                            })
                        }
                    });

                    function OnEncryptionCompleted(){
                        scheduledEncryptions--;
                        if(scheduledEncryptions === 0) editServerForm.submit();
                    }
                }
                document.addEventListener('DOMContentLoaded', EditServerLoad);
            </script>
        </section>

        {{#if editingView}}
        <section>
            <div class="mt-4 rounded-2xl border bg-neutral-50 p-5 md:p-6">
                <h2 class="text-xl font-semibold">API credentials</h2>
                <ul class="list-disc my-4 pl-5 space-y-1">
                    <li>Account ID: <code>{{account.id}}</code></li>
                    <li>SERVER ID: <code>{{server.id}}</code></li>
                    <li>API TOKEN: {{#if account.api_token}}
                        <code>{{account.api_token}}</code>
                        {{else}}
                        <button><a href="/contact" target="_blank" class="inline-flex items-center rounded-lg border px-3 py-1 hover:bg-neutral-50">Get Token</a></button>
                        {{/if}}
                    </li>
                </ul>
            </div>
            <div class="mt-4 rounded-2xl border bg-neutral-50 p-5 md:p-6">
                <h2 class="text-xl font-semibold">Server notes (internal, encrypted)</h2>
                <form method="post" action="{{submitNoteLink}}" id="editServerNote" class="mt-3 space-y-4">
                    <textarea type="text" id="server-note" name="note" rows="12" class="encrypted_value w-full rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30">{{{server.serverNote}}}</textarea>
                    <div class="pt-2 text-center"></div>
                        <label class="text-sm font-medium" for="encryption_psw_notes">Encryption password</label>
                        <input type="text" placeholder="Encryption password" class="encryption-password mt-1 w-full max-w-xs rounded-lg border px-3 py-2 outline-none focus:ring-2 focus:ring-black/30" id="encryption_psw_notes">
                        <input type="submit" class="submit inline-flex items-center rounded-lg bg-black px-5 py-2 mt-5 text-white hover:opacity-90 cursor-pointer" value="Update">
                    </div>
                </form>
                <script>
                    document.addEventListener('DOMContentLoaded', function(){
                        let serverNoteForm = document.getElementById('editServerNote');
                        serverNoteForm.addEventListener('submit', function (event) {
                            // prevent sending form
                            event.preventDefault();
                            let cryptPsw = document.getElementById('encryption_psw_notes').value;
                            let formData = new FormData(serverNoteForm);
                            const submitData = formData.get('note');
                            // if already encryted (it was not decrypted, skip)
                            console.log("Encrypting content", submitData);
                            EncryptContent(cryptPsw, submitData, document.getElementById('server-note'))
                            .then(encryptedContent => {
                                console.log("Encrypted Note:", encryptedContent, encryptedContent.length);
                                formData.set('note', encryptedContent);
                                //document.getElementById('server-note').value = encryptedContent;
                                serverNoteForm.submit();
                            })
                            .catch(error => {
                                console.error("Encryption failed:", error);
                            })
                        })
                    });
                </script>
            </div>
        </section>
        {{/if}}
    </div>
    {{/if}}
	
    <section class="my-10">
        <h2 class="mb-2 text-xl font-semibold">Server Actions (Unencrypted)</h2>
        <ol class="list-decimal space-y-2 pl-6">
             {{#each actions}}
            <li>[{{formatDate this.timestamp}}] {{{this.action}}}</a></li>
            {{/each}}
        </ol>
        {{#if isOwner}}
        {{!--<h3>Add custom Action</h3>
        <form method="post" action="/dashboard/custom-server-action">
            <div id="server-action">
                <textarea type="text" id="server-action" name="server-action" rows="2" cols="100">{{server.note}}</textarea>
                <input type="submit" class="submit btn btn-black btn-rounded" id="submit-server-action" value="Add Action">
            </div>
        </form>--}}
        {{/if}}
    </section>

    {{!-- Server chart --}}
</main>
{{> scripts/cryptography}}
{{> scripts/security-guard}}
{{> scripts/tabselector}}
{{> footer_tailwind}}
